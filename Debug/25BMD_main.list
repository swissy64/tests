
25BMD_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dc8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fe0  08005fe0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fe8  08005fe8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  2000000c  08005ffc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08005ffc  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ee3  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d0b  00000000  00000000  00039f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118a  00000000  00000000  0003e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c07  00000000  00000000  0003f482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001978a  00000000  00000000  00068089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116746  00000000  00000000  00081813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006290  00000000  00000000  00197f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0019e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005f88 	.word	0x08005f88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005f88 	.word	0x08005f88

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fdd0 	bl	80010be <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f82d 	bl	800057c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fa9d 	bl	8000a60 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000526:	f000 f875 	bl	8000614 <MX_ADC2_Init>
  MX_FDCAN2_Init();
 800052a:	f000 f8d9 	bl	80006e0 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 800052e:	f000 f91d 	bl	800076c <MX_FDCAN3_Init>
  MX_TIM1_Init();
 8000532:	f000 f961 	bl	80007f8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000536:	f000 fa1b 	bl	8000970 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 800053a:	f000 fa69 	bl	8000a10 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800053e:	2100      	movs	r1, #0
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <main+0x64>)
 8000542:	f003 fc45 	bl	8003dd0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000546:	2100      	movs	r1, #0
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <main+0x64>)
 800054a:	f004 fc1d 	bl	8004d88 <HAL_TIMEx_PWMN_Start>

  int Duty = 5000;
 800054e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000552:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  while(1){
  /* USER CODE BEGIN WHILE */
	  while(Duty < 100){
 8000554:	e009      	b.n	800056a <main+0x56>
		  Duty += 10;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	330a      	adds	r3, #10
 800055a:	607b      	str	r3, [r7, #4]
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Duty);
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <main+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 8000564:	2064      	movs	r0, #100	; 0x64
 8000566:	f000 fe1b 	bl	80011a0 <HAL_Delay>
	  while(Duty < 100){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b63      	cmp	r3, #99	; 0x63
 800056e:	ddf2      	ble.n	8000556 <main+0x42>
	  }
	  Duty = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
	  while(Duty < 100){
 8000574:	e7f9      	b.n	800056a <main+0x56>
 8000576:	bf00      	nop
 8000578:	2000015c 	.word	0x2000015c

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2238      	movs	r2, #56	; 0x38
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fccf 	bl	8005f2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800059e:	2000      	movs	r0, #0
 80005a0:	f002 fb2e 	bl	8002c00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005a4:	2321      	movs	r3, #33	; 0x21
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	2303      	movs	r3, #3
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80005be:	232a      	movs	r3, #42	; 0x2a
 80005c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fbc8 	bl	8002d68 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005de:	f000 fab3 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2303      	movs	r3, #3
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fec6 	bl	800338c <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000606:	f000 fa9f 	bl	8000b48 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f005 fc84 	bl	8005f2e <memset>
  /* USER CODE BEGIN ADC2_Init 1 */
  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000628:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <MX_ADC2_Init+0xc4>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800062e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000632:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800064e:	2204      	movs	r2, #4
 8000650:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000654:	2200      	movs	r2, #0
 8000656:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800065a:	2200      	movs	r2, #0
 800065c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000660:	2201      	movs	r2, #1
 8000662:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000674:	2200      	movs	r2, #0
 8000676:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_ADC2_Init+0xc0>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000682:	2200      	movs	r2, #0
 8000684:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_ADC2_Init+0xc0>)
 8000690:	f000 ff7e 	bl	8001590 <HAL_ADC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800069a:	f000 fa55 	bl	8000b48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_ADC2_Init+0xc8>)
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC2_Init+0xc0>)
 80006bc:	f001 f924 	bl	8001908 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006c6:	f000 fa3f 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  /* USER CODE END ADC2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000028 	.word	0x20000028
 80006d8:	50000100 	.word	0x50000100
 80006dc:	0c900008 	.word	0x0c900008

080006e0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_Init 0 */
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */
  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_FDCAN2_Init+0x84>)
 80006e6:	4a20      	ldr	r2, [pc, #128]	; (8000768 <MX_FDCAN2_Init+0x88>)
 80006e8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_FDCAN2_Init+0x84>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_FDCAN2_Init+0x84>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_FDCAN2_Init+0x84>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_FDCAN2_Init+0x84>)
 80006fe:	2200      	movs	r2, #0
 8000700:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_FDCAN2_Init+0x84>)
 8000704:	2200      	movs	r2, #0
 8000706:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_FDCAN2_Init+0x84>)
 800070a:	2200      	movs	r2, #0
 800070c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_FDCAN2_Init+0x84>)
 8000710:	2210      	movs	r2, #16
 8000712:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_FDCAN2_Init+0x84>)
 8000716:	2201      	movs	r2, #1
 8000718:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_FDCAN2_Init+0x84>)
 800071c:	2202      	movs	r2, #2
 800071e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_FDCAN2_Init+0x84>)
 8000722:	2202      	movs	r2, #2
 8000724:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_FDCAN2_Init+0x84>)
 8000728:	2201      	movs	r2, #1
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <MX_FDCAN2_Init+0x84>)
 800072e:	2201      	movs	r2, #1
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_FDCAN2_Init+0x84>)
 8000734:	2201      	movs	r2, #1
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_FDCAN2_Init+0x84>)
 800073a:	2201      	movs	r2, #1
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_FDCAN2_Init+0x84>)
 8000740:	2200      	movs	r2, #0
 8000742:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_FDCAN2_Init+0x84>)
 8000746:	2200      	movs	r2, #0
 8000748:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_FDCAN2_Init+0x84>)
 800074c:	2200      	movs	r2, #0
 800074e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_FDCAN2_Init+0x84>)
 8000752:	f001 fdfd 	bl	8002350 <HAL_FDCAN_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800075c:	f000 f9f4 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  /* USER CODE END FDCAN2_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000094 	.word	0x20000094
 8000768:	40006800 	.word	0x40006800

0800076c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_Init 0 */
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */
  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 8000772:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <MX_FDCAN3_Init+0x88>)
 8000774:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 800078a:	2200      	movs	r2, #0
 800078c:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 8000790:	2200      	movs	r2, #0
 8000792:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 8000796:	2200      	movs	r2, #0
 8000798:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 800079c:	2210      	movs	r2, #16
 800079e:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007a8:	2202      	movs	r2, #2
 80007aa:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007d8:	2200      	movs	r2, #0
 80007da:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_FDCAN3_Init+0x84>)
 80007de:	f001 fdb7 	bl	8002350 <HAL_FDCAN_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 80007e8:	f000 f9ae 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
  /* USER CODE END FDCAN3_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000f8 	.word	0x200000f8
 80007f4:	40006c00 	.word	0x40006c00

080007f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b09c      	sub	sp, #112	; 0x70
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000818:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
 8000828:	615a      	str	r2, [r3, #20]
 800082a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2234      	movs	r2, #52	; 0x34
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f005 fb7b 	bl	8005f2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000838:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <MX_TIM1_Init+0x170>)
 800083a:	4a4c      	ldr	r2, [pc, #304]	; (800096c <MX_TIM1_Init+0x174>)
 800083c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800083e:	4b4a      	ldr	r3, [pc, #296]	; (8000968 <MX_TIM1_Init+0x170>)
 8000840:	22a7      	movs	r2, #167	; 0xa7
 8000842:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b48      	ldr	r3, [pc, #288]	; (8000968 <MX_TIM1_Init+0x170>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800084a:	4b47      	ldr	r3, [pc, #284]	; (8000968 <MX_TIM1_Init+0x170>)
 800084c:	2263      	movs	r2, #99	; 0x63
 800084e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b45      	ldr	r3, [pc, #276]	; (8000968 <MX_TIM1_Init+0x170>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000856:	4b44      	ldr	r3, [pc, #272]	; (8000968 <MX_TIM1_Init+0x170>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085c:	4b42      	ldr	r3, [pc, #264]	; (8000968 <MX_TIM1_Init+0x170>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000862:	4841      	ldr	r0, [pc, #260]	; (8000968 <MX_TIM1_Init+0x170>)
 8000864:	f003 f9fc 	bl	8003c60 <HAL_TIM_Base_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800086e:	f000 f96b 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000878:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800087c:	4619      	mov	r1, r3
 800087e:	483a      	ldr	r0, [pc, #232]	; (8000968 <MX_TIM1_Init+0x170>)
 8000880:	f003 fccc 	bl	800421c <HAL_TIM_ConfigClockSource>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800088a:	f000 f95d 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800088e:	4836      	ldr	r0, [pc, #216]	; (8000968 <MX_TIM1_Init+0x170>)
 8000890:	f003 fa3d 	bl	8003d0e <HAL_TIM_PWM_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800089a:	f000 f955 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008ae:	4619      	mov	r1, r3
 80008b0:	482d      	ldr	r0, [pc, #180]	; (8000968 <MX_TIM1_Init+0x170>)
 80008b2:	f004 fb2b 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80008bc:	f000 f944 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c0:	2360      	movs	r3, #96	; 0x60
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c8:	2300      	movs	r3, #0
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008cc:	2300      	movs	r3, #0
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4820      	ldr	r0, [pc, #128]	; (8000968 <MX_TIM1_Init+0x170>)
 80008e6:	f003 fb85 	bl	8003ff4 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80008f0:	f000 f92a 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008f8:	2204      	movs	r2, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	481a      	ldr	r0, [pc, #104]	; (8000968 <MX_TIM1_Init+0x170>)
 80008fe:	f003 fb79 	bl	8003ff4 <HAL_TIM_PWM_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000908:	f000 f91e 	bl	8000b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_TIM1_Init+0x170>)
 800094a:	f004 fb75 	bl	8005038 <HAL_TIMEx_ConfigBreakDeadTime>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8000954:	f000 f8f8 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM1_Init+0x170>)
 800095a:	f000 fa69 	bl	8000e30 <HAL_TIM_MspPostInit>

}
 800095e:	bf00      	nop
 8000960:	3770      	adds	r7, #112	; 0x70
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000015c 	.word	0x2000015c
 800096c:	40012c00 	.word	0x40012c00

08000970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 8000976:	4a25      	ldr	r2, [pc, #148]	; (8000a0c <MX_USART2_UART_Init+0x9c>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80009b8:	2300      	movs	r3, #0
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	4812      	ldr	r0, [pc, #72]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 80009c0:	f005 f90f 	bl	8005be2 <HAL_RS485Ex_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 80009ca:	f000 f8bd 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 80009d2:	f005 f9a8 	bl	8005d26 <HAL_UARTEx_SetTxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 80009dc:	f000 f8b4 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 80009e4:	f005 f9dd 	bl	8005da2 <HAL_UARTEx_SetRxFifoThreshold>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 80009ee:	f000 f8ab 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART2_UART_Init+0x98>)
 80009f4:	f005 f95e 	bl	8005cb4 <HAL_UARTEx_DisableFifoMode>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 80009fe:	f000 f8a3 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001a8 	.word	0x200001a8
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Init 0 */
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */
  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <MX_USB_PCD_Init+0x4c>)
 8000a18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_USB_PCD_Init+0x48>)
 8000a46:	f001 ffe3 	bl	8002a10 <HAL_PCD_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a50:	f000 f87a 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  /* USER CODE END USB_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000023c 	.word	0x2000023c
 8000a5c:	40005c00 	.word	0x40005c00

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a2a      	ldr	r2, [pc, #168]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a24      	ldr	r2, [pc, #144]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_CAN_Pin|LED_SIG_R_Pin|LED_SIG_F_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000adc:	4818      	ldr	r0, [pc, #96]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ade:	f001 ff7f 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USB_CAN_Pin LED_SIG_R_Pin LED_SIG_F_Pin */
  GPIO_InitStruct.Pin = USB_CAN_Pin|LED_SIG_R_Pin|LED_SIG_F_Pin;
 8000ae2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4811      	ldr	r0, [pc, #68]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000afc:	f001 fdee 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000b00:	2330      	movs	r3, #48	; 0x30
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f001 fde1 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Normal_Pin BOOT0_IN_Pin */
  GPIO_InitStruct.Pin = CS_Normal_Pin|BOOT0_IN_Pin;
 8000b1a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_GPIO_Init+0xe4>)
 8000b30:	f001 fdd4 	bl	80026dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000800 	.word	0x48000800
 8000b44:	48000400 	.word	0x48000400

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_MspInit+0x44>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6593      	str	r3, [r2, #88]	; 0x58
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x44>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b8e:	f002 f8db 	bl	8002d48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09e      	sub	sp, #120	; 0x78
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	2254      	movs	r2, #84	; 0x54
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f005 f9b4 	bl	8005f2e <memset>
  if(hadc->Instance==ADC2)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <HAL_ADC_MspInit+0xa4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d134      	bne.n	8000c3a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bd4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bd6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bda:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fdef 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000bec:	f7ff ffac 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_ADC_MspInit+0xa8>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_ADC_MspInit+0xa8>)
 8000bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_ADC_MspInit+0xa8>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_ADC_MspInit+0xa8>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_ADC_MspInit+0xa8>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_ADC_MspInit+0xa8>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = CS_Sensing_Pin;
 8000c20:	2340      	movs	r3, #64	; 0x40
 8000c22:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c24:	2303      	movs	r3, #3
 8000c26:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CS_Sensing_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f001 fd51 	bl	80026dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3778      	adds	r7, #120	; 0x78
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	50000100 	.word	0x50000100
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0a2      	sub	sp, #136	; 0x88
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	2254      	movs	r2, #84	; 0x54
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 f95e 	bl	8005f2e <memset>
  if(hfdcan->Instance==FDCAN2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a59      	ldr	r2, [pc, #356]	; (8000ddc <HAL_FDCAN_MspInit+0x190>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d143      	bne.n	8000d04 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c86:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0320 	add.w	r3, r7, #32
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fd99 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000c98:	f7ff ff56 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c9c:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <HAL_FDCAN_MspInit+0x194>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a4f      	ldr	r2, [pc, #316]	; (8000de0 <HAL_FDCAN_MspInit+0x194>)
 8000ca4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ca6:	4b4e      	ldr	r3, [pc, #312]	; (8000de0 <HAL_FDCAN_MspInit+0x194>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d10b      	bne.n	8000cc6 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cae:	4b4d      	ldr	r3, [pc, #308]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	4a4c      	ldr	r2, [pc, #304]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000cb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cba:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc2:	61fb      	str	r3, [r7, #28]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a46      	ldr	r2, [pc, #280]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b44      	ldr	r3, [pc, #272]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cde:	2360      	movs	r3, #96	; 0x60
 8000ce0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000cf0:	2309      	movs	r3, #9
 8000cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	483a      	ldr	r0, [pc, #232]	; (8000de8 <HAL_FDCAN_MspInit+0x19c>)
 8000cfe:	f001 fced 	bl	80026dc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000d02:	e067      	b.n	8000dd4 <HAL_FDCAN_MspInit+0x188>
  else if(hfdcan->Instance==FDCAN3)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a38      	ldr	r2, [pc, #224]	; (8000dec <HAL_FDCAN_MspInit+0x1a0>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d162      	bne.n	8000dd4 <HAL_FDCAN_MspInit+0x188>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d18:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1a:	f107 0320 	add.w	r3, r7, #32
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fd50 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 8000d2a:	f7ff ff0d 	bl	8000b48 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <HAL_FDCAN_MspInit+0x194>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <HAL_FDCAN_MspInit+0x194>)
 8000d36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <HAL_FDCAN_MspInit+0x194>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d10b      	bne.n	8000d58 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d40:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d44:	4a27      	ldr	r2, [pc, #156]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4c:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	4a21      	ldr	r2, [pc, #132]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_FDCAN_MspInit+0x198>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d8c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000d9c:	230b      	movs	r3, #11
 8000d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f001 fc96 	bl	80026dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000db0:	2308      	movs	r3, #8
 8000db2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <HAL_FDCAN_MspInit+0x19c>)
 8000dd0:	f001 fc84 	bl	80026dc <HAL_GPIO_Init>
}
 8000dd4:	bf00      	nop
 8000dd6:	3788      	adds	r7, #136	; 0x88
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40006800 	.word	0x40006800
 8000de0:	20000518 	.word	0x20000518
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400
 8000dec:	40006c00 	.word	0x40006c00

08000df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_TIM_Base_MspInit+0x38>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d10b      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_TIM_Base_MspInit+0x3c>)
 8000e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_TIM_Base_MspInit+0x3c>)
 8000e08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <HAL_TIM_Base_MspInit+0x3c>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40012c00 	.word	0x40012c00
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <HAL_TIM_MspPostInit+0xa0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d13a      	bne.n	8000ec8 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <HAL_TIM_MspPostInit+0xa4>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <HAL_TIM_MspPostInit+0xa4>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <HAL_TIM_MspPostInit+0xa4>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <HAL_TIM_MspPostInit+0xa4>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_TIM_MspPostInit+0xa4>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_TIM_MspPostInit+0xa4>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e82:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e94:	2306      	movs	r3, #6
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <HAL_TIM_MspPostInit+0xa8>)
 8000ea0:	f001 fc1c 	bl	80026dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f001 fc0a 	bl	80026dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40012c00 	.word	0x40012c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48000400 	.word	0x48000400

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b09e      	sub	sp, #120	; 0x78
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	2254      	movs	r2, #84	; 0x54
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 f816 	bl	8005f2e <memset>
  if(huart->Instance==USART2)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <HAL_UART_MspInit+0xa8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d136      	bne.n	8000f7a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fc53 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f24:	f7ff fe10 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_UART_MspInit+0xac>)
 8000f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2c:	4a16      	ldr	r2, [pc, #88]	; (8000f88 <HAL_UART_MspInit+0xac>)
 8000f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f32:	6593      	str	r3, [r2, #88]	; 0x58
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_UART_MspInit+0xac>)
 8000f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_UART_MspInit+0xac>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_UART_MspInit+0xac>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_UART_MspInit+0xac>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f58:	230e      	movs	r3, #14
 8000f5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f001 fbb1 	bl	80026dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3778      	adds	r7, #120	; 0x78
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b098      	sub	sp, #96	; 0x60
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2254      	movs	r2, #84	; 0x54
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 ffc6 	bl	8005f2e <memset>
  if(hpcd->Instance==USB)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <HAL_PCD_MspInit+0x60>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d11a      	bne.n	8000fe2 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fc02 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000fc6:	f7ff fdbf 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_PCD_MspInit+0x64>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <HAL_PCD_MspInit+0x64>)
 8000fd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_PCD_MspInit+0x64>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3760      	adds	r7, #96	; 0x60
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40005c00 	.word	0x40005c00
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001040:	f000 f890 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001070:	f7ff ffea 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	; (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	; (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f004 ff51 	bl	8005f40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109e:	f7ff fa39 	bl	8000514 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   r0, =_estack
 80010a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010b0:	08005ff0 	.word	0x08005ff0
  ldr r2, =_sbss
 80010b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010b8:	20000520 	.word	0x20000520

080010bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_2_IRQHandler>

080010be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f001 f90f 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 f80e 	bl	80010f0 <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	e001      	b.n	80010e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e0:	f7ff fd3a 	bl	8000b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e4:	79fb      	ldrb	r3, [r7, #7]

}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_InitTick+0x68>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d022      	beq.n	800114a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_InitTick+0x6c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_InitTick+0x68>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001110:	fbb1 f3f3 	udiv	r3, r1, r3
 8001114:	fbb2 f3f3 	udiv	r3, r2, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f001 f90c 	bl	8002336 <HAL_SYSTICK_Config>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10f      	bne.n	8001144 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	d809      	bhi.n	800113e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112a:	2200      	movs	r2, #0
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	f001 f8e6 	bl	8002302 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_InitTick+0x70>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	e007      	b.n	800114e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e004      	b.n	800114e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e001      	b.n	800114e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000008 	.word	0x20000008
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x1c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x20>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4413      	add	r3, r2
 8001172:	4a03      	ldr	r2, [pc, #12]	; (8001180 <HAL_IncTick+0x1c>)
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	2000051c 	.word	0x2000051c
 8001184:	20000008 	.word	0x20000008

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000051c 	.word	0x2000051c

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d004      	beq.n	80011c4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_Delay+0x40>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4413      	add	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c4:	bf00      	nop
 80011c6:	f7ff ffdf 	bl	8001188 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d8f7      	bhi.n	80011c6 <HAL_Delay+0x26>
  {
  }
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000008 	.word	0x20000008

080011e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	609a      	str	r2, [r3, #8]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3360      	adds	r3, #96	; 0x60
 800125e:	461a      	mov	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <LL_ADC_SetOffset+0x44>)
 800126e:	4013      	ands	r3, r2
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	4313      	orrs	r3, r2
 800127c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001284:	bf00      	nop
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	03fff000 	.word	0x03fff000

08001294 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3360      	adds	r3, #96	; 0x60
 80012a2:	461a      	mov	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3360      	adds	r3, #96	; 0x60
 80012d0:	461a      	mov	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b087      	sub	sp, #28
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3360      	adds	r3, #96	; 0x60
 8001306:	461a      	mov	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	431a      	orrs	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001320:	bf00      	nop
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3360      	adds	r3, #96	; 0x60
 800133c:	461a      	mov	r2, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	431a      	orrs	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001356:	bf00      	nop
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	615a      	str	r2, [r3, #20]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3330      	adds	r3, #48	; 0x30
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	4413      	add	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	211f      	movs	r1, #31
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	401a      	ands	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	0e9b      	lsrs	r3, r3, #26
 80013c0:	f003 011f 	and.w	r1, r3, #31
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	431a      	orrs	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3314      	adds	r3, #20
 80013f0:	461a      	mov	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	0e5b      	lsrs	r3, r3, #25
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	4413      	add	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	0d1b      	lsrs	r3, r3, #20
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	2107      	movs	r1, #7
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	401a      	ands	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	0d1b      	lsrs	r3, r3, #20
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800142a:	bf00      	nop
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001450:	43db      	mvns	r3, r3
 8001452:	401a      	ands	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0318 	and.w	r3, r3, #24
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <LL_ADC_SetChannelSingleDiff+0x44>)
 800145c:	40d9      	lsrs	r1, r3
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	400b      	ands	r3, r1
 8001462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001466:	431a      	orrs	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	0007ffff 	.word	0x0007ffff

08001480 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6093      	str	r3, [r2, #8]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014b8:	d101      	bne.n	80014be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001508:	d101      	bne.n	800150e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <LL_ADC_IsEnabled+0x18>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <LL_ADC_IsEnabled+0x1a>
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b04      	cmp	r3, #4
 8001554:	d101      	bne.n	800155a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b08      	cmp	r3, #8
 800157a:	d101      	bne.n	8001580 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e1a9      	b.n	80018fe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff faf1 	bl	8000ba0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff67 	bl	80014a4 <LL_ADC_IsDeepPowerDownEnabled>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff4d 	bl	8001480 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff82 	bl	80014f4 <LL_ADC_IsInternalRegulatorEnabled>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d115      	bne.n	8001622 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff66 	bl	80014cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001600:	4b9c      	ldr	r3, [pc, #624]	; (8001874 <HAL_ADC_Init+0x2e4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	099b      	lsrs	r3, r3, #6
 8001606:	4a9c      	ldr	r2, [pc, #624]	; (8001878 <HAL_ADC_Init+0x2e8>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	3301      	adds	r3, #1
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001614:	e002      	b.n	800161c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3b01      	subs	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff64 	bl	80014f4 <LL_ADC_IsInternalRegulatorEnabled>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10d      	bne.n	800164e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	f043 0210 	orr.w	r2, r3, #16
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff75 	bl	8001542 <LL_ADC_REG_IsConversionOngoing>
 8001658:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 8142 	bne.w	80018ec <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 813e 	bne.w	80018ec <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001678:	f043 0202 	orr.w	r2, r3, #2
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff49 	bl	800151c <LL_ADC_IsEnabled>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d141      	bne.n	8001714 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001698:	d004      	beq.n	80016a4 <HAL_ADC_Init+0x114>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a77      	ldr	r2, [pc, #476]	; (800187c <HAL_ADC_Init+0x2ec>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d10f      	bne.n	80016c4 <HAL_ADC_Init+0x134>
 80016a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80016a8:	f7ff ff38 	bl	800151c <LL_ADC_IsEnabled>
 80016ac:	4604      	mov	r4, r0
 80016ae:	4873      	ldr	r0, [pc, #460]	; (800187c <HAL_ADC_Init+0x2ec>)
 80016b0:	f7ff ff34 	bl	800151c <LL_ADC_IsEnabled>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4323      	orrs	r3, r4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	e012      	b.n	80016ea <HAL_ADC_Init+0x15a>
 80016c4:	486e      	ldr	r0, [pc, #440]	; (8001880 <HAL_ADC_Init+0x2f0>)
 80016c6:	f7ff ff29 	bl	800151c <LL_ADC_IsEnabled>
 80016ca:	4604      	mov	r4, r0
 80016cc:	486d      	ldr	r0, [pc, #436]	; (8001884 <HAL_ADC_Init+0x2f4>)
 80016ce:	f7ff ff25 	bl	800151c <LL_ADC_IsEnabled>
 80016d2:	4603      	mov	r3, r0
 80016d4:	431c      	orrs	r4, r3
 80016d6:	486c      	ldr	r0, [pc, #432]	; (8001888 <HAL_ADC_Init+0x2f8>)
 80016d8:	f7ff ff20 	bl	800151c <LL_ADC_IsEnabled>
 80016dc:	4603      	mov	r3, r0
 80016de:	4323      	orrs	r3, r4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d012      	beq.n	8001714 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f6:	d004      	beq.n	8001702 <HAL_ADC_Init+0x172>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a5f      	ldr	r2, [pc, #380]	; (800187c <HAL_ADC_Init+0x2ec>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Init+0x176>
 8001702:	4a62      	ldr	r2, [pc, #392]	; (800188c <HAL_ADC_Init+0x2fc>)
 8001704:	e000      	b.n	8001708 <HAL_ADC_Init+0x178>
 8001706:	4a62      	ldr	r2, [pc, #392]	; (8001890 <HAL_ADC_Init+0x300>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4619      	mov	r1, r3
 800170e:	4610      	mov	r0, r2
 8001710:	f7ff fd68 	bl	80011e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7f5b      	ldrb	r3, [r3, #29]
 8001718:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800171e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001724:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800172a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001732:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173e:	2b01      	cmp	r3, #1
 8001740:	d106      	bne.n	8001750 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	3b01      	subs	r3, #1
 8001748:	045b      	lsls	r3, r3, #17
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	4b48      	ldr	r3, [pc, #288]	; (8001894 <HAL_ADC_Init+0x304>)
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	430b      	orrs	r3, r1
 800177e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fee4 	bl	8001568 <LL_ADC_INJ_IsConversionOngoing>
 80017a0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d17f      	bne.n	80018a8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d17c      	bne.n	80018a8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017ca:	f023 0302 	bic.w	r3, r3, #2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	69b9      	ldr	r1, [r7, #24]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d017      	beq.n	8001810 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6911      	ldr	r1, [r2, #16]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	430b      	orrs	r3, r1
 800180a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800180e:	e013      	b.n	8001838 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691a      	ldr	r2, [r3, #16]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800181e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001830:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001834:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183e:	2b01      	cmp	r3, #1
 8001840:	d12a      	bne.n	8001898 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001858:	4311      	orrs	r1, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800185e:	4311      	orrs	r1, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001864:	430a      	orrs	r2, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0201 	orr.w	r2, r2, #1
 8001870:	611a      	str	r2, [r3, #16]
 8001872:	e019      	b.n	80018a8 <HAL_ADC_Init+0x318>
 8001874:	20000000 	.word	0x20000000
 8001878:	053e2d63 	.word	0x053e2d63
 800187c:	50000100 	.word	0x50000100
 8001880:	50000400 	.word	0x50000400
 8001884:	50000500 	.word	0x50000500
 8001888:	50000600 	.word	0x50000600
 800188c:	50000300 	.word	0x50000300
 8001890:	50000700 	.word	0x50000700
 8001894:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d10c      	bne.n	80018ca <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f023 010f 	bic.w	r1, r3, #15
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	1e5a      	subs	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
 80018c8:	e007      	b.n	80018da <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 020f 	bic.w	r2, r2, #15
 80018d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	f023 0303 	bic.w	r3, r3, #3
 80018e2:	f043 0201 	orr.w	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ea:	e007      	b.n	80018fc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	f043 0210 	orr.w	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	bf00      	nop

08001908 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0b6      	sub	sp, #216	; 0xd8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001922:	2b01      	cmp	r3, #1
 8001924:	d102      	bne.n	800192c <HAL_ADC_ConfigChannel+0x24>
 8001926:	2302      	movs	r3, #2
 8001928:	f000 bc13 	b.w	8002152 <HAL_ADC_ConfigChannel+0x84a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fe02 	bl	8001542 <LL_ADC_REG_IsConversionOngoing>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 83f3 	bne.w	800212c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6859      	ldr	r1, [r3, #4]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	f7ff fd18 	bl	8001388 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fdf0 	bl	8001542 <LL_ADC_REG_IsConversionOngoing>
 8001962:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fdfc 	bl	8001568 <LL_ADC_INJ_IsConversionOngoing>
 8001970:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001974:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 81d9 	bne.w	8001d30 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800197e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001982:	2b00      	cmp	r3, #0
 8001984:	f040 81d4 	bne.w	8001d30 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001990:	d10f      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff fd1f 	bl	80013e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fcd9 	bl	8001362 <LL_ADC_SetSamplingTimeCommonConfig>
 80019b0:	e00e      	b.n	80019d0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	461a      	mov	r2, r3
 80019c0:	f7ff fd0e 	bl	80013e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fcc9 	bl	8001362 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d022      	beq.n	8001a38 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6919      	ldr	r1, [r3, #16]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a02:	f7ff fc23 	bl	800124c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6919      	ldr	r1, [r3, #16]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f7ff fc6f 	bl	80012f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d102      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x126>
 8001a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a2c:	e000      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x128>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	461a      	mov	r2, r3
 8001a32:	f7ff fc7b 	bl	800132c <LL_ADC_SetOffsetSaturation>
 8001a36:	e17b      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fc28 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10a      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x15c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fc1d 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	0e9b      	lsrs	r3, r3, #26
 8001a5e:	f003 021f 	and.w	r2, r3, #31
 8001a62:	e01e      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x19a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fc12 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001a92:	2320      	movs	r3, #32
 8001a94:	e004      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001a96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x1b2>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0e9b      	lsrs	r3, r3, #26
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	e018      	b.n	8001aec <HAL_ADC_ConfigChannel+0x1e4>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	e004      	b.n	8001aec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d106      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fbe1 	bl	80012c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2101      	movs	r1, #1
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fbc5 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x222>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fbba 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	0e9b      	lsrs	r3, r3, #26
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	e01e      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x260>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fbaf 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e004      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x278>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0e9b      	lsrs	r3, r3, #26
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	e018      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x2aa>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	e004      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d106      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fb7e 	bl	80012c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2102      	movs	r1, #2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fb62 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10a      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x2e8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2102      	movs	r1, #2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fb57 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	f003 021f 	and.w	r2, r3, #31
 8001bee:	e01e      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x326>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fb4c 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e004      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x33e>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0e9b      	lsrs	r3, r3, #26
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	e016      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x36c>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001c66:	2320      	movs	r3, #32
 8001c68:	e004      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d106      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fb1d 	bl	80012c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fb01 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10a      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x3aa>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2103      	movs	r1, #3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff faf6 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	e017      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x3da>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2103      	movs	r1, #3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff faeb 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ccc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e003      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d105      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x3f2>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	e011      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x416>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001d12:	2320      	movs	r3, #32
 8001d14:	e003      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d106      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2200      	movs	r2, #0
 8001d28:	2103      	movs	r1, #3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fac8 	bl	80012c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fbf1 	bl	800151c <LL_ADC_IsEnabled>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f040 813d 	bne.w	8001fbc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f7ff fb72 	bl	8001438 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4aa2      	ldr	r2, [pc, #648]	; (8001fe4 <HAL_ADC_ConfigChannel+0x6dc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	f040 812e 	bne.w	8001fbc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10b      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x480>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	3301      	adds	r3, #1
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2b09      	cmp	r3, #9
 8001d7e:	bf94      	ite	ls
 8001d80:	2301      	movls	r3, #1
 8001d82:	2300      	movhi	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	e019      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x4b4>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d98:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001da0:	2320      	movs	r3, #32
 8001da2:	e003      	b.n	8001dac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	2b09      	cmp	r3, #9
 8001db4:	bf94      	ite	ls
 8001db6:	2301      	movls	r3, #1
 8001db8:	2300      	movhi	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d079      	beq.n	8001eb4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x4d4>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	069b      	lsls	r3, r3, #26
 8001dd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dda:	e015      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x500>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001df4:	2320      	movs	r3, #32
 8001df6:	e003      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	069b      	lsls	r3, r3, #26
 8001e04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x520>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	e017      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x550>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e003      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	ea42 0103 	orr.w	r1, r2, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10a      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x576>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0e9b      	lsrs	r3, r3, #26
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	051b      	lsls	r3, r3, #20
 8001e7c:	e018      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x5a8>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001e96:	2320      	movs	r3, #32
 8001e98:	e003      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	e07e      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x5c8>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	069b      	lsls	r3, r3, #26
 8001eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ece:	e015      	b.n	8001efc <HAL_ADC_ConfigChannel+0x5f4>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	e003      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	069b      	lsls	r3, r3, #26
 8001ef8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x614>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	e017      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x644>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	61fb      	str	r3, [r7, #28]
  return result;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	e003      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	3301      	adds	r3, #1
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	ea42 0103 	orr.w	r1, r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x670>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	3301      	adds	r3, #1
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b1e      	subs	r3, #30
 8001f70:	051b      	lsls	r3, r3, #20
 8001f72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f76:	e01b      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x6a8>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	613b      	str	r3, [r7, #16]
  return result;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001f90:	2320      	movs	r3, #32
 8001f92:	e003      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f003 021f 	and.w	r2, r3, #31
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3b1e      	subs	r3, #30
 8001faa:	051b      	lsls	r3, r3, #20
 8001fac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7ff fa12 	bl	80013e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_ADC_ConfigChannel+0x6e0>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80be 	beq.w	8002146 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd2:	d004      	beq.n	8001fde <HAL_ADC_ConfigChannel+0x6d6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_ADC_ConfigChannel+0x6e4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d10a      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x6ec>
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <HAL_ADC_ConfigChannel+0x6e8>)
 8001fe0:	e009      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x6ee>
 8001fe2:	bf00      	nop
 8001fe4:	407f0000 	.word	0x407f0000
 8001fe8:	80080000 	.word	0x80080000
 8001fec:	50000100 	.word	0x50000100
 8001ff0:	50000300 	.word	0x50000300
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_ADC_ConfigChannel+0x854>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f91a 	bl	8001230 <LL_ADC_GetCommonPathInternalCh>
 8001ffc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a56      	ldr	r2, [pc, #344]	; (8002160 <HAL_ADC_ConfigChannel+0x858>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d004      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x70c>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a55      	ldr	r2, [pc, #340]	; (8002164 <HAL_ADC_ConfigChannel+0x85c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d13a      	bne.n	800208a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d134      	bne.n	800208a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002028:	d005      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x72e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a4e      	ldr	r2, [pc, #312]	; (8002168 <HAL_ADC_ConfigChannel+0x860>)
 8002030:	4293      	cmp	r3, r2
 8002032:	f040 8085 	bne.w	8002140 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800203e:	d004      	beq.n	800204a <HAL_ADC_ConfigChannel+0x742>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a49      	ldr	r2, [pc, #292]	; (800216c <HAL_ADC_ConfigChannel+0x864>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x746>
 800204a:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_ADC_ConfigChannel+0x868>)
 800204c:	e000      	b.n	8002050 <HAL_ADC_ConfigChannel+0x748>
 800204e:	4a43      	ldr	r2, [pc, #268]	; (800215c <HAL_ADC_ConfigChannel+0x854>)
 8002050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002058:	4619      	mov	r1, r3
 800205a:	4610      	mov	r0, r2
 800205c:	f7ff f8d5 	bl	800120a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002060:	4b44      	ldr	r3, [pc, #272]	; (8002174 <HAL_ADC_ConfigChannel+0x86c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	099b      	lsrs	r3, r3, #6
 8002066:	4a44      	ldr	r2, [pc, #272]	; (8002178 <HAL_ADC_ConfigChannel+0x870>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800207a:	e002      	b.n	8002082 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3b01      	subs	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002088:	e05a      	b.n	8002140 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a3b      	ldr	r2, [pc, #236]	; (800217c <HAL_ADC_ConfigChannel+0x874>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d125      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d11f      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a31      	ldr	r2, [pc, #196]	; (800216c <HAL_ADC_ConfigChannel+0x864>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d104      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x7ac>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a34      	ldr	r2, [pc, #208]	; (8002180 <HAL_ADC_ConfigChannel+0x878>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d047      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020bc:	d004      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x7c0>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a2a      	ldr	r2, [pc, #168]	; (800216c <HAL_ADC_ConfigChannel+0x864>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x7c4>
 80020c8:	4a29      	ldr	r2, [pc, #164]	; (8002170 <HAL_ADC_ConfigChannel+0x868>)
 80020ca:	e000      	b.n	80020ce <HAL_ADC_ConfigChannel+0x7c6>
 80020cc:	4a23      	ldr	r2, [pc, #140]	; (800215c <HAL_ADC_ConfigChannel+0x854>)
 80020ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d6:	4619      	mov	r1, r3
 80020d8:	4610      	mov	r0, r2
 80020da:	f7ff f896 	bl	800120a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020de:	e031      	b.n	8002144 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a27      	ldr	r2, [pc, #156]	; (8002184 <HAL_ADC_ConfigChannel+0x87c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d12d      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d127      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <HAL_ADC_ConfigChannel+0x864>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d022      	beq.n	8002146 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002108:	d004      	beq.n	8002114 <HAL_ADC_ConfigChannel+0x80c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_ADC_ConfigChannel+0x864>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x810>
 8002114:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_ADC_ConfigChannel+0x868>)
 8002116:	e000      	b.n	800211a <HAL_ADC_ConfigChannel+0x812>
 8002118:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_ADC_ConfigChannel+0x854>)
 800211a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800211e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002122:	4619      	mov	r1, r3
 8002124:	4610      	mov	r0, r2
 8002126:	f7ff f870 	bl	800120a <LL_ADC_SetCommonPathInternalCh>
 800212a:	e00c      	b.n	8002146 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800213e:	e002      	b.n	8002146 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002140:	bf00      	nop
 8002142:	e000      	b.n	8002146 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002144:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800214e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002152:	4618      	mov	r0, r3
 8002154:	37d8      	adds	r7, #216	; 0xd8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	50000700 	.word	0x50000700
 8002160:	c3210000 	.word	0xc3210000
 8002164:	90c00010 	.word	0x90c00010
 8002168:	50000600 	.word	0x50000600
 800216c:	50000100 	.word	0x50000100
 8002170:	50000300 	.word	0x50000300
 8002174:	20000000 	.word	0x20000000
 8002178:	053e2d63 	.word	0x053e2d63
 800217c:	c7520000 	.word	0xc7520000
 8002180:	50000500 	.word	0x50000500
 8002184:	cb840000 	.word	0xcb840000

08002188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ba:	4a04      	ldr	r2, [pc, #16]	; (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60d3      	str	r3, [r2, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <__NVIC_GetPriorityGrouping+0x18>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0307 	and.w	r3, r3, #7
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	; (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	; (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
         );
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f7ff ff8e 	bl	80021ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff47 	bl	8002188 <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002310:	f7ff ff5e 	bl	80021d0 <__NVIC_GetPriorityGrouping>
 8002314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff90 	bl	8002240 <NVIC_EncodePriority>
 8002320:	4602      	mov	r2, r0
 8002322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff5f 	bl	80021ec <__NVIC_SetPriority>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffb2 	bl	80022a8 <SysTick_Config>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e147      	b.n	80025f2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fc68 	bl	8000c4c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0210 	bic.w	r2, r2, #16
 800238a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7fe fefc 	bl	8001188 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002392:	e012      	b.n	80023ba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002394:	f7fe fef8 	bl	8001188 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b0a      	cmp	r3, #10
 80023a0:	d90b      	bls.n	80023ba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2203      	movs	r2, #3
 80023b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e11b      	b.n	80025f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d0e5      	beq.n	8002394 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d8:	f7fe fed6 	bl	8001188 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80023de:	e012      	b.n	8002406 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80023e0:	f7fe fed2 	bl	8001188 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b0a      	cmp	r3, #10
 80023ec:	d90b      	bls.n	8002406 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0f5      	b.n	80025f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0e5      	beq.n	80023e0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0202 	orr.w	r2, r2, #2
 8002422:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a74      	ldr	r2, [pc, #464]	; (80025fc <HAL_FDCAN_Init+0x2ac>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d103      	bne.n	8002436 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800242e:	4a74      	ldr	r2, [pc, #464]	; (8002600 <HAL_FDCAN_Init+0x2b0>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7c1b      	ldrb	r3, [r3, #16]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d108      	bne.n	8002450 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800244c:	619a      	str	r2, [r3, #24]
 800244e:	e007      	b.n	8002460 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800245e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7c5b      	ldrb	r3, [r3, #17]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d108      	bne.n	800247a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002476:	619a      	str	r2, [r3, #24]
 8002478:	e007      	b.n	800248a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002488:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7c9b      	ldrb	r3, [r3, #18]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d108      	bne.n	80024a4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024a0:	619a      	str	r2, [r3, #24]
 80024a2:	e007      	b.n	80024b4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024b2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80024d8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0210 	bic.w	r2, r2, #16
 80024e8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0204 	orr.w	r2, r2, #4
 8002500:	619a      	str	r2, [r3, #24]
 8002502:	e02c      	b.n	800255e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d028      	beq.n	800255e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d01c      	beq.n	800254e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002522:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0210 	orr.w	r2, r2, #16
 8002532:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d110      	bne.n	800255e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0220 	orr.w	r2, r2, #32
 800254a:	619a      	str	r2, [r3, #24]
 800254c:	e007      	b.n	800255e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0220 	orr.w	r2, r2, #32
 800255c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	3b01      	subs	r3, #1
 8002564:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	3b01      	subs	r3, #1
 800256c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800256e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002576:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	3b01      	subs	r3, #1
 8002580:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002586:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002588:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002592:	d115      	bne.n	80025c0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	3b01      	subs	r3, #1
 80025a0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025a2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	3b01      	subs	r3, #1
 80025aa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80025ac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	3b01      	subs	r3, #1
 80025b6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80025bc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025be:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f814 	bl	8002604 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40006400 	.word	0x40006400
 8002600:	40006500 	.word	0x40006500

08002604 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800260c:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800260e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2f      	ldr	r2, [pc, #188]	; (80026d4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d103      	bne.n	8002622 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002620:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2c      	ldr	r2, [pc, #176]	; (80026d8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d103      	bne.n	8002634 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8002632:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002642:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	041a      	lsls	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002668:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	061a      	lsls	r2, r3, #24
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e005      	b.n	80026b6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3304      	adds	r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d3f3      	bcc.n	80026aa <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	4000a400 	.word	0x4000a400
 80026d4:	40006800 	.word	0x40006800
 80026d8:	40006c00 	.word	0x40006c00

080026dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026ea:	e15a      	b.n	80029a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	2101      	movs	r1, #1
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 814c 	beq.w	800299c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b01      	cmp	r3, #1
 800270e:	d005      	beq.n	800271c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002718:	2b02      	cmp	r3, #2
 800271a:	d130      	bne.n	800277e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002752:	2201      	movs	r2, #1
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 0201 	and.w	r2, r3, #1
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b03      	cmp	r3, #3
 8002788:	d017      	beq.n	80027ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	2203      	movs	r2, #3
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d123      	bne.n	800280e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	220f      	movs	r2, #15
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	08da      	lsrs	r2, r3, #3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3208      	adds	r2, #8
 8002808:	6939      	ldr	r1, [r7, #16]
 800280a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0203 	and.w	r2, r3, #3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80a6 	beq.w	800299c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002850:	4b5b      	ldr	r3, [pc, #364]	; (80029c0 <HAL_GPIO_Init+0x2e4>)
 8002852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002854:	4a5a      	ldr	r2, [pc, #360]	; (80029c0 <HAL_GPIO_Init+0x2e4>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6613      	str	r3, [r2, #96]	; 0x60
 800285c:	4b58      	ldr	r3, [pc, #352]	; (80029c0 <HAL_GPIO_Init+0x2e4>)
 800285e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002868:	4a56      	ldr	r2, [pc, #344]	; (80029c4 <HAL_GPIO_Init+0x2e8>)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002892:	d01f      	beq.n	80028d4 <HAL_GPIO_Init+0x1f8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a4c      	ldr	r2, [pc, #304]	; (80029c8 <HAL_GPIO_Init+0x2ec>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d019      	beq.n	80028d0 <HAL_GPIO_Init+0x1f4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a4b      	ldr	r2, [pc, #300]	; (80029cc <HAL_GPIO_Init+0x2f0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d013      	beq.n	80028cc <HAL_GPIO_Init+0x1f0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a4a      	ldr	r2, [pc, #296]	; (80029d0 <HAL_GPIO_Init+0x2f4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00d      	beq.n	80028c8 <HAL_GPIO_Init+0x1ec>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a49      	ldr	r2, [pc, #292]	; (80029d4 <HAL_GPIO_Init+0x2f8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <HAL_GPIO_Init+0x1e8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a48      	ldr	r2, [pc, #288]	; (80029d8 <HAL_GPIO_Init+0x2fc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_GPIO_Init+0x1e4>
 80028bc:	2305      	movs	r3, #5
 80028be:	e00a      	b.n	80028d6 <HAL_GPIO_Init+0x1fa>
 80028c0:	2306      	movs	r3, #6
 80028c2:	e008      	b.n	80028d6 <HAL_GPIO_Init+0x1fa>
 80028c4:	2304      	movs	r3, #4
 80028c6:	e006      	b.n	80028d6 <HAL_GPIO_Init+0x1fa>
 80028c8:	2303      	movs	r3, #3
 80028ca:	e004      	b.n	80028d6 <HAL_GPIO_Init+0x1fa>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e002      	b.n	80028d6 <HAL_GPIO_Init+0x1fa>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_GPIO_Init+0x1fa>
 80028d4:	2300      	movs	r3, #0
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	f002 0203 	and.w	r2, r2, #3
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	4093      	lsls	r3, r2
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e6:	4937      	ldr	r1, [pc, #220]	; (80029c4 <HAL_GPIO_Init+0x2e8>)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f4:	4b39      	ldr	r3, [pc, #228]	; (80029dc <HAL_GPIO_Init+0x300>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002918:	4a30      	ldr	r2, [pc, #192]	; (80029dc <HAL_GPIO_Init+0x300>)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <HAL_GPIO_Init+0x300>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002942:	4a26      	ldr	r2, [pc, #152]	; (80029dc <HAL_GPIO_Init+0x300>)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_GPIO_Init+0x300>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43db      	mvns	r3, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_GPIO_Init+0x300>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <HAL_GPIO_Init+0x300>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002996:	4a11      	ldr	r2, [pc, #68]	; (80029dc <HAL_GPIO_Init+0x300>)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3301      	adds	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f47f ae9d 	bne.w	80026ec <HAL_GPIO_Init+0x10>
  }
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40010000 	.word	0x40010000
 80029c8:	48000400 	.word	0x48000400
 80029cc:	48000800 	.word	0x48000800
 80029d0:	48000c00 	.word	0x48000c00
 80029d4:	48001000 	.word	0x48001000
 80029d8:	48001400 	.word	0x48001400
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
 80029ec:	4613      	mov	r3, r2
 80029ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f0:	787b      	ldrb	r3, [r7, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0c0      	b.n	8002ba4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe faa8 	bl	8000f8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2203      	movs	r2, #3
 8002a40:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fa37 	bl	8005ebc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e03e      	b.n	8002ad2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	3311      	adds	r3, #17
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	3310      	adds	r3, #16
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3313      	adds	r3, #19
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3320      	adds	r3, #32
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3324      	adds	r3, #36	; 0x24
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	791b      	ldrb	r3, [r3, #4]
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d3bb      	bcc.n	8002a54 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	e044      	b.n	8002b6c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	791b      	ldrb	r3, [r3, #4]
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d3b5      	bcc.n	8002ae2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b82:	f003 f9b6 	bl	8005ef2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7a9b      	ldrb	r3, [r3, #10]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d102      	bne.n	8002ba2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f805 	bl	8002bac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	f043 0302 	orr.w	r3, r3, #2
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d141      	bne.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c0e:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1a:	d131      	bne.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c1c:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c22:	4a46      	ldr	r2, [pc, #280]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2c:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c34:	4a41      	ldr	r2, [pc, #260]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c3c:	4b40      	ldr	r3, [pc, #256]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2232      	movs	r2, #50	; 0x32
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	4a3f      	ldr	r2, [pc, #252]	; (8002d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	0c9b      	lsrs	r3, r3, #18
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c52:	e002      	b.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5a:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d102      	bne.n	8002c6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f2      	bne.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c6e:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7a:	d158      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e057      	b.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c80:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c86:	4a2d      	ldr	r2, [pc, #180]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c90:	e04d      	b.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c98:	d141      	bne.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c9a:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d131      	bne.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ca8:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cae:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cc0:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2232      	movs	r2, #50	; 0x32
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	0c9b      	lsrs	r3, r3, #18
 8002cda:	3301      	adds	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cde:	e002      	b.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf2:	d102      	bne.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f2      	bne.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d06:	d112      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e011      	b.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d1c:	e007      	b.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d1e:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	20000000 	.word	0x20000000
 8002d44:	431bde83 	.word	0x431bde83

08002d48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d56:	6093      	str	r3, [r2, #8]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40007000 	.word	0x40007000

08002d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e2fe      	b.n	8003378 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d075      	beq.n	8002e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d86:	4b97      	ldr	r3, [pc, #604]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d90:	4b94      	ldr	r3, [pc, #592]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b0c      	cmp	r3, #12
 8002d9e:	d102      	bne.n	8002da6 <HAL_RCC_OscConfig+0x3e>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d002      	beq.n	8002dac <HAL_RCC_OscConfig+0x44>
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d10b      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	4b8d      	ldr	r3, [pc, #564]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05b      	beq.n	8002e70 <HAL_RCC_OscConfig+0x108>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d157      	bne.n	8002e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e2d9      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCC_OscConfig+0x74>
 8002dce:	4b85      	ldr	r3, [pc, #532]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a84      	ldr	r2, [pc, #528]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x98>
 8002de6:	4b7f      	ldr	r3, [pc, #508]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7e      	ldr	r2, [pc, #504]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b7c      	ldr	r3, [pc, #496]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a7b      	ldr	r2, [pc, #492]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002e00:	4b78      	ldr	r3, [pc, #480]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a77      	ldr	r2, [pc, #476]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b75      	ldr	r3, [pc, #468]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a74      	ldr	r2, [pc, #464]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe f9b2 	bl	8001188 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe f9ae 	bl	8001188 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e29e      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3a:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xc0>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe f99e 	bl	8001188 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe f99a 	bl	8001188 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e28a      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e62:	4b60      	ldr	r3, [pc, #384]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0xe8>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d075      	beq.n	8002f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7e:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e88:	4b56      	ldr	r3, [pc, #344]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b0c      	cmp	r3, #12
 8002e96:	d102      	bne.n	8002e9e <HAL_RCC_OscConfig+0x136>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x13c>
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d11f      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea4:	4b4f      	ldr	r3, [pc, #316]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x154>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e25d      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b49      	ldr	r3, [pc, #292]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	4946      	ldr	r1, [pc, #280]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ed0:	4b45      	ldr	r3, [pc, #276]	; (8002fe8 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe f90b 	bl	80010f0 <HAL_InitTick>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d043      	beq.n	8002f68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e249      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d023      	beq.n	8002f34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eec:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3c      	ldr	r2, [pc, #240]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe f946 	bl	8001188 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fe f942 	bl	8001188 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e232      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f12:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	492d      	ldr	r1, [pc, #180]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
 8002f32:	e01a      	b.n	8002f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f34:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2a      	ldr	r2, [pc, #168]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe f922 	bl	8001188 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f48:	f7fe f91e 	bl	8001188 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e20e      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x1e0>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d041      	beq.n	8002ffa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01c      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7e:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fe f8fb 	bl	8001188 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f96:	f7fe f8f7 	bl	8001188 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e1e7      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0ef      	beq.n	8002f96 <HAL_RCC_OscConfig+0x22e>
 8002fb6:	e020      	b.n	8002ffa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbe:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe f8de 	bl	8001188 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fce:	e00d      	b.n	8002fec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7fe f8da 	bl	8001188 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d906      	bls.n	8002fec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e1ca      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fec:	4b8c      	ldr	r3, [pc, #560]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 8002fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ea      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80a6 	beq.w	8003154 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003008:	2300      	movs	r3, #0
 800300a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800300c:	4b84      	ldr	r3, [pc, #528]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_OscConfig+0x2b4>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x2b6>
 800301c:	2300      	movs	r3, #0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	4a7e      	ldr	r2, [pc, #504]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 8003028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302c:	6593      	str	r3, [r2, #88]	; 0x58
 800302e:	4b7c      	ldr	r3, [pc, #496]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800303a:	2301      	movs	r3, #1
 800303c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303e:	4b79      	ldr	r3, [pc, #484]	; (8003224 <HAL_RCC_OscConfig+0x4bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d118      	bne.n	800307c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800304a:	4b76      	ldr	r3, [pc, #472]	; (8003224 <HAL_RCC_OscConfig+0x4bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a75      	ldr	r2, [pc, #468]	; (8003224 <HAL_RCC_OscConfig+0x4bc>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003056:	f7fe f897 	bl	8001188 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305e:	f7fe f893 	bl	8001188 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e183      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003070:	4b6c      	ldr	r3, [pc, #432]	; (8003224 <HAL_RCC_OscConfig+0x4bc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d108      	bne.n	8003096 <HAL_RCC_OscConfig+0x32e>
 8003084:	4b66      	ldr	r3, [pc, #408]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	4a65      	ldr	r2, [pc, #404]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003094:	e024      	b.n	80030e0 <HAL_RCC_OscConfig+0x378>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b05      	cmp	r3, #5
 800309c:	d110      	bne.n	80030c0 <HAL_RCC_OscConfig+0x358>
 800309e:	4b60      	ldr	r3, [pc, #384]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	4a5e      	ldr	r2, [pc, #376]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ae:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	4a5a      	ldr	r2, [pc, #360]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030be:	e00f      	b.n	80030e0 <HAL_RCC_OscConfig+0x378>
 80030c0:	4b57      	ldr	r3, [pc, #348]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	4a56      	ldr	r2, [pc, #344]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	4a52      	ldr	r2, [pc, #328]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d016      	beq.n	8003116 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fe f84e 	bl	8001188 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe f84a 	bl	8001188 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e138      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003106:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ed      	beq.n	80030f0 <HAL_RCC_OscConfig+0x388>
 8003114:	e015      	b.n	8003142 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003116:	f7fe f837 	bl	8001188 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7fe f833 	bl	8001188 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e121      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003134:	4b3a      	ldr	r3, [pc, #232]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ed      	bne.n	800311e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003142:	7ffb      	ldrb	r3, [r7, #31]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003148:	4b35      	ldr	r3, [pc, #212]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	4a34      	ldr	r2, [pc, #208]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 800314e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003152:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d03c      	beq.n	80031da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01c      	beq.n	80031a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003168:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 800316a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800316e:	4a2c      	ldr	r2, [pc, #176]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fe f806 	bl	8001188 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003180:	f7fe f802 	bl	8001188 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0f2      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003192:	4b23      	ldr	r3, [pc, #140]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 8003194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ef      	beq.n	8003180 <HAL_RCC_OscConfig+0x418>
 80031a0:	e01b      	b.n	80031da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031a2:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80031a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a8:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fd ffe9 	bl	8001188 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ba:	f7fd ffe5 	bl	8001188 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0d5      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ef      	bne.n	80031ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80c9 	beq.w	8003376 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031e4:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	f000 8083 	beq.w	80032f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d15e      	bne.n	80032b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_RCC_OscConfig+0x4b8>)
 8003200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fd ffbf 	bl	8001188 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320c:	e00c      	b.n	8003228 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320e:	f7fd ffbb 	bl	8001188 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d905      	bls.n	8003228 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e0ab      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003228:	4b55      	ldr	r3, [pc, #340]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1ec      	bne.n	800320e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003234:	4b52      	ldr	r3, [pc, #328]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4b52      	ldr	r3, [pc, #328]	; (8003384 <HAL_RCC_OscConfig+0x61c>)
 800323a:	4013      	ands	r3, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6a11      	ldr	r1, [r2, #32]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003244:	3a01      	subs	r2, #1
 8003246:	0112      	lsls	r2, r2, #4
 8003248:	4311      	orrs	r1, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800324e:	0212      	lsls	r2, r2, #8
 8003250:	4311      	orrs	r1, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003256:	0852      	lsrs	r2, r2, #1
 8003258:	3a01      	subs	r2, #1
 800325a:	0552      	lsls	r2, r2, #21
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003262:	0852      	lsrs	r2, r2, #1
 8003264:	3a01      	subs	r2, #1
 8003266:	0652      	lsls	r2, r2, #25
 8003268:	4311      	orrs	r1, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800326e:	06d2      	lsls	r2, r2, #27
 8003270:	430a      	orrs	r2, r1
 8003272:	4943      	ldr	r1, [pc, #268]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a40      	ldr	r2, [pc, #256]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003284:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a3d      	ldr	r2, [pc, #244]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 800328a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fd ff7a 	bl	8001188 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fd ff76 	bl	8001188 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e066      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032aa:	4b35      	ldr	r3, [pc, #212]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x530>
 80032b6:	e05e      	b.n	8003376 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b8:	4b31      	ldr	r3, [pc, #196]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a30      	ldr	r2, [pc, #192]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 80032be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fd ff60 	bl	8001188 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fd ff5c 	bl	8001188 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e04c      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032de:	4b28      	ldr	r3, [pc, #160]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	4924      	ldr	r1, [pc, #144]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	60cb      	str	r3, [r1, #12]
 80032f6:	e03e      	b.n	8003376 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e039      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_RCC_OscConfig+0x618>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0203 	and.w	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	429a      	cmp	r2, r3
 8003316:	d12c      	bne.n	8003372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	3b01      	subs	r3, #1
 8003324:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d123      	bne.n	8003372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d11b      	bne.n	8003372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d113      	bne.n	8003372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	3b01      	subs	r3, #1
 8003358:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d109      	bne.n	8003372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	085b      	lsrs	r3, r3, #1
 800336a:	3b01      	subs	r3, #1
 800336c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	019f800c 	.word	0x019f800c
 8003388:	feeefffc 	.word	0xfeeefffc

0800338c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e11e      	b.n	80035e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b91      	ldr	r3, [pc, #580]	; (80035ec <HAL_RCC_ClockConfig+0x260>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d910      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b8e      	ldr	r3, [pc, #568]	; (80035ec <HAL_RCC_ClockConfig+0x260>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 020f 	bic.w	r2, r3, #15
 80033ba:	498c      	ldr	r1, [pc, #560]	; (80035ec <HAL_RCC_ClockConfig+0x260>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b8a      	ldr	r3, [pc, #552]	; (80035ec <HAL_RCC_ClockConfig+0x260>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e106      	b.n	80035e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d073      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d129      	bne.n	800343c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e8:	4b81      	ldr	r3, [pc, #516]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0f4      	b.n	80035e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033f8:	f000 f99e 	bl	8003738 <RCC_GetSysClockFreqFromPLLSource>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4a7c      	ldr	r2, [pc, #496]	; (80035f4 <HAL_RCC_ClockConfig+0x268>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d93f      	bls.n	8003486 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003406:	4b7a      	ldr	r3, [pc, #488]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800341a:	2b00      	cmp	r3, #0
 800341c:	d033      	beq.n	8003486 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003422:	2b00      	cmp	r3, #0
 8003424:	d12f      	bne.n	8003486 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003426:	4b72      	ldr	r3, [pc, #456]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800342e:	4a70      	ldr	r2, [pc, #448]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003434:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	e024      	b.n	8003486 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d107      	bne.n	8003454 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0c6      	b.n	80035e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003454:	4b66      	ldr	r3, [pc, #408]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0be      	b.n	80035e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003464:	f000 f8ce 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8003468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4a61      	ldr	r2, [pc, #388]	; (80035f4 <HAL_RCC_ClockConfig+0x268>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d909      	bls.n	8003486 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003472:	4b5f      	ldr	r3, [pc, #380]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800347a:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 800347c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003480:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003486:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4957      	ldr	r1, [pc, #348]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003498:	f7fd fe76 	bl	8001188 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7fd fe72 	bl	8001188 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e095      	b.n	80035e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 020c 	and.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1eb      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d023      	beq.n	800351c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 80034e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034f8:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003500:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4936      	ldr	r1, [pc, #216]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
 800351a:	e008      	b.n	800352e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b80      	cmp	r3, #128	; 0x80
 8003520:	d105      	bne.n	800352e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003522:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4a32      	ldr	r2, [pc, #200]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800352c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800352e:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <HAL_RCC_ClockConfig+0x260>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d21d      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_RCC_ClockConfig+0x260>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 020f 	bic.w	r2, r3, #15
 8003544:	4929      	ldr	r1, [pc, #164]	; (80035ec <HAL_RCC_ClockConfig+0x260>)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800354c:	f7fd fe1c 	bl	8001188 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fd fe18 	bl	8001188 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e03b      	b.n	80035e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_RCC_ClockConfig+0x260>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d1ed      	bne.n	8003554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4917      	ldr	r1, [pc, #92]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	490f      	ldr	r1, [pc, #60]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035b6:	f000 f825 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035ba:	4602      	mov	r2, r0
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_RCC_ClockConfig+0x264>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	490c      	ldr	r1, [pc, #48]	; (80035f8 <HAL_RCC_ClockConfig+0x26c>)
 80035c8:	5ccb      	ldrb	r3, [r1, r3]
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <HAL_RCC_ClockConfig+0x270>)
 80035d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_RCC_ClockConfig+0x274>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd fd88 	bl	80010f0 <HAL_InitTick>
 80035e0:	4603      	mov	r3, r0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40022000 	.word	0x40022000
 80035f0:	40021000 	.word	0x40021000
 80035f4:	04c4b400 	.word	0x04c4b400
 80035f8:	08005fa0 	.word	0x08005fa0
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800360a:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b04      	cmp	r3, #4
 8003614:	d102      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003616:	4b2a      	ldr	r3, [pc, #168]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	e047      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b08      	cmp	r3, #8
 8003626:	d102      	bne.n	800362e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003628:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	e03e      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800362e:	4b23      	ldr	r3, [pc, #140]	; (80036bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d136      	bne.n	80036a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	3301      	adds	r3, #1
 8003650:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d10c      	bne.n	8003672 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003658:	4a1a      	ldr	r2, [pc, #104]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	4a16      	ldr	r2, [pc, #88]	; (80036bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003662:	68d2      	ldr	r2, [r2, #12]
 8003664:	0a12      	lsrs	r2, r2, #8
 8003666:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	617b      	str	r3, [r7, #20]
      break;
 8003670:	e00c      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003672:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	4a10      	ldr	r2, [pc, #64]	; (80036bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	0a12      	lsrs	r2, r2, #8
 8003680:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
      break;
 800368a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	0e5b      	lsrs	r3, r3, #25
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	3301      	adds	r3, #1
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	e001      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036ac:	693b      	ldr	r3, [r7, #16]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	00f42400 	.word	0x00f42400
 80036c4:	007a1200 	.word	0x007a1200

080036c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000000 	.word	0x20000000

080036e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036e4:	f7ff fff0 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4904      	ldr	r1, [pc, #16]	; (8003708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000
 8003708:	08005fb0 	.word	0x08005fb0

0800370c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003710:	f7ff ffda 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	0adb      	lsrs	r3, r3, #11
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	4904      	ldr	r1, [pc, #16]	; (8003734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40021000 	.word	0x40021000
 8003734:	08005fb0 	.word	0x08005fb0

08003738 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800373e:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	3301      	adds	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d10c      	bne.n	8003776 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800375c:	4a17      	ldr	r2, [pc, #92]	; (80037bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003766:	68d2      	ldr	r2, [r2, #12]
 8003768:	0a12      	lsrs	r2, r2, #8
 800376a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	617b      	str	r3, [r7, #20]
    break;
 8003774:	e00c      	b.n	8003790 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	fbb2 f3f3 	udiv	r3, r2, r3
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003780:	68d2      	ldr	r2, [r2, #12]
 8003782:	0a12      	lsrs	r2, r2, #8
 8003784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003788:	fb02 f303 	mul.w	r3, r2, r3
 800378c:	617b      	str	r3, [r7, #20]
    break;
 800378e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	0e5b      	lsrs	r3, r3, #25
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	3301      	adds	r3, #1
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037aa:	687b      	ldr	r3, [r7, #4]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40021000 	.word	0x40021000
 80037bc:	007a1200 	.word	0x007a1200
 80037c0:	00f42400 	.word	0x00f42400

080037c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037cc:	2300      	movs	r3, #0
 80037ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037d0:	2300      	movs	r3, #0
 80037d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8098 	beq.w	8003912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e6:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	4b40      	ldr	r3, [pc, #256]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	4a3f      	ldr	r2, [pc, #252]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6593      	str	r3, [r2, #88]	; 0x58
 80037fe:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380a:	2301      	movs	r3, #1
 800380c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380e:	4b3a      	ldr	r3, [pc, #232]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a39      	ldr	r2, [pc, #228]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800381a:	f7fd fcb5 	bl	8001188 <HAL_GetTick>
 800381e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003820:	e009      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003822:	f7fd fcb1 	bl	8001188 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d902      	bls.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	74fb      	strb	r3, [r7, #19]
        break;
 8003834:	e005      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003836:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ef      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d159      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003848:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003852:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01e      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	d019      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003864:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003870:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	4a1f      	ldr	r2, [pc, #124]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003890:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd fc71 	bl	8001188 <HAL_GetTick>
 80038a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a8:	e00b      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fd fc6d 	bl	8001188 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d902      	bls.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	74fb      	strb	r3, [r7, #19]
            break;
 80038c0:	e006      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c2:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ec      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e4:	4903      	ldr	r1, [pc, #12]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038ec:	e008      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	74bb      	strb	r3, [r7, #18]
 80038f2:	e005      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003900:	7c7b      	ldrb	r3, [r7, #17]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d105      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003906:	4ba7      	ldr	r3, [pc, #668]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390a:	4aa6      	ldr	r2, [pc, #664]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003910:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800391e:	4ba1      	ldr	r3, [pc, #644]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f023 0203 	bic.w	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	499d      	ldr	r1, [pc, #628]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003940:	4b98      	ldr	r3, [pc, #608]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 020c 	bic.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4995      	ldr	r1, [pc, #596]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003962:	4b90      	ldr	r3, [pc, #576]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	498c      	ldr	r1, [pc, #560]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003984:	4b87      	ldr	r3, [pc, #540]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	4984      	ldr	r1, [pc, #528]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039a6:	4b7f      	ldr	r3, [pc, #508]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	497b      	ldr	r1, [pc, #492]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039c8:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	4973      	ldr	r1, [pc, #460]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ea:	4b6e      	ldr	r3, [pc, #440]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	496a      	ldr	r1, [pc, #424]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a0c:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	4962      	ldr	r1, [pc, #392]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	4959      	ldr	r1, [pc, #356]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a50:	4b54      	ldr	r3, [pc, #336]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a56:	f023 0203 	bic.w	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	4951      	ldr	r1, [pc, #324]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a72:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4948      	ldr	r1, [pc, #288]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d015      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a94:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4940      	ldr	r1, [pc, #256]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab4:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4a3a      	ldr	r2, [pc, #232]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003abe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d015      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003acc:	4b35      	ldr	r3, [pc, #212]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ada:	4932      	ldr	r1, [pc, #200]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aea:	d105      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aec:	4b2d      	ldr	r3, [pc, #180]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a2c      	ldr	r2, [pc, #176]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d015      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b04:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	4924      	ldr	r1, [pc, #144]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b22:	d105      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b24:	4b1f      	ldr	r3, [pc, #124]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4a1e      	ldr	r2, [pc, #120]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d015      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b5c:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d019      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	4908      	ldr	r1, [pc, #32]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a02      	ldr	r2, [pc, #8]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9e:	60d3      	str	r3, [r2, #12]
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d015      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bb4:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	4926      	ldr	r1, [pc, #152]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bd2:	d105      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bd4:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bde:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d015      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfa:	4918      	ldr	r1, [pc, #96]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0a:	d105      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c0c:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c16:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	490a      	ldr	r1, [pc, #40]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c42:	d105      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c50:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000

08003c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e049      	b.n	8003d06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd f8b2 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f000 fbd2 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e049      	b.n	8003db4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f841 	bl	8003dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f000 fb7b 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_PWM_Start+0x24>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e03c      	b.n	8003e6e <HAL_TIM_PWM_Start+0x9e>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d109      	bne.n	8003e0e <HAL_TIM_PWM_Start+0x3e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e02f      	b.n	8003e6e <HAL_TIM_PWM_Start+0x9e>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d109      	bne.n	8003e28 <HAL_TIM_PWM_Start+0x58>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e022      	b.n	8003e6e <HAL_TIM_PWM_Start+0x9e>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	d109      	bne.n	8003e42 <HAL_TIM_PWM_Start+0x72>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	bf14      	ite	ne
 8003e3a:	2301      	movne	r3, #1
 8003e3c:	2300      	moveq	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	e015      	b.n	8003e6e <HAL_TIM_PWM_Start+0x9e>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d109      	bne.n	8003e5c <HAL_TIM_PWM_Start+0x8c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	bf14      	ite	ne
 8003e54:	2301      	movne	r3, #1
 8003e56:	2300      	moveq	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	e008      	b.n	8003e6e <HAL_TIM_PWM_Start+0x9e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0a6      	b.n	8003fc4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_TIM_PWM_Start+0xb6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e84:	e023      	b.n	8003ece <HAL_TIM_PWM_Start+0xfe>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Start+0xc6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e94:	e01b      	b.n	8003ece <HAL_TIM_PWM_Start+0xfe>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0xd6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea4:	e013      	b.n	8003ece <HAL_TIM_PWM_Start+0xfe>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b0c      	cmp	r3, #12
 8003eaa:	d104      	bne.n	8003eb6 <HAL_TIM_PWM_Start+0xe6>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eb4:	e00b      	b.n	8003ece <HAL_TIM_PWM_Start+0xfe>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d104      	bne.n	8003ec6 <HAL_TIM_PWM_Start+0xf6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec4:	e003      	b.n	8003ece <HAL_TIM_PWM_Start+0xfe>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	6839      	ldr	r1, [r7, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 ff30 	bl	8004d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a3a      	ldr	r2, [pc, #232]	; (8003fcc <HAL_TIM_PWM_Start+0x1fc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d018      	beq.n	8003f18 <HAL_TIM_PWM_Start+0x148>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a39      	ldr	r2, [pc, #228]	; (8003fd0 <HAL_TIM_PWM_Start+0x200>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <HAL_TIM_PWM_Start+0x148>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a37      	ldr	r2, [pc, #220]	; (8003fd4 <HAL_TIM_PWM_Start+0x204>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00e      	beq.n	8003f18 <HAL_TIM_PWM_Start+0x148>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <HAL_TIM_PWM_Start+0x208>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_TIM_PWM_Start+0x148>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a34      	ldr	r2, [pc, #208]	; (8003fdc <HAL_TIM_PWM_Start+0x20c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_TIM_PWM_Start+0x148>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a33      	ldr	r2, [pc, #204]	; (8003fe0 <HAL_TIM_PWM_Start+0x210>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d101      	bne.n	8003f1c <HAL_TIM_PWM_Start+0x14c>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_TIM_PWM_Start+0x14e>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a25      	ldr	r2, [pc, #148]	; (8003fcc <HAL_TIM_PWM_Start+0x1fc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d022      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x1b2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f44:	d01d      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x1b2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <HAL_TIM_PWM_Start+0x214>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d018      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x1b2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a24      	ldr	r2, [pc, #144]	; (8003fe8 <HAL_TIM_PWM_Start+0x218>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x1b2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a23      	ldr	r2, [pc, #140]	; (8003fec <HAL_TIM_PWM_Start+0x21c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00e      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x1b2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_TIM_PWM_Start+0x200>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x1b2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <HAL_TIM_PWM_Start+0x204>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x1b2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_TIM_PWM_Start+0x210>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d115      	bne.n	8003fae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_TIM_PWM_Start+0x220>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b06      	cmp	r3, #6
 8003f92:	d015      	beq.n	8003fc0 <HAL_TIM_PWM_Start+0x1f0>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9a:	d011      	beq.n	8003fc0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fac:	e008      	b.n	8003fc0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0201 	orr.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e000      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40013400 	.word	0x40013400
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800
 8003fe0:	40015000 	.word	0x40015000
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800
 8003fec:	40000c00 	.word	0x40000c00
 8003ff0:	00010007 	.word	0x00010007

08003ff4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800400e:	2302      	movs	r3, #2
 8004010:	e0ff      	b.n	8004212 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b14      	cmp	r3, #20
 800401e:	f200 80f0 	bhi.w	8004202 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	0800407d 	.word	0x0800407d
 800402c:	08004203 	.word	0x08004203
 8004030:	08004203 	.word	0x08004203
 8004034:	08004203 	.word	0x08004203
 8004038:	080040bd 	.word	0x080040bd
 800403c:	08004203 	.word	0x08004203
 8004040:	08004203 	.word	0x08004203
 8004044:	08004203 	.word	0x08004203
 8004048:	080040ff 	.word	0x080040ff
 800404c:	08004203 	.word	0x08004203
 8004050:	08004203 	.word	0x08004203
 8004054:	08004203 	.word	0x08004203
 8004058:	0800413f 	.word	0x0800413f
 800405c:	08004203 	.word	0x08004203
 8004060:	08004203 	.word	0x08004203
 8004064:	08004203 	.word	0x08004203
 8004068:	08004181 	.word	0x08004181
 800406c:	08004203 	.word	0x08004203
 8004070:	08004203 	.word	0x08004203
 8004074:	08004203 	.word	0x08004203
 8004078:	080041c1 	.word	0x080041c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fa94 	bl	80045b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0208 	orr.w	r2, r2, #8
 8004096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0204 	bic.w	r2, r2, #4
 80040a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6999      	ldr	r1, [r3, #24]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	619a      	str	r2, [r3, #24]
      break;
 80040ba:	e0a5      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fb0e 	bl	80046e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6999      	ldr	r1, [r3, #24]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	619a      	str	r2, [r3, #24]
      break;
 80040fc:	e084      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fb81 	bl	800480c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0208 	orr.w	r2, r2, #8
 8004118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0204 	bic.w	r2, r2, #4
 8004128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69d9      	ldr	r1, [r3, #28]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	61da      	str	r2, [r3, #28]
      break;
 800413c:	e064      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fbf3 	bl	8004930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69d9      	ldr	r1, [r3, #28]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	021a      	lsls	r2, r3, #8
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	61da      	str	r2, [r3, #28]
      break;
 800417e:	e043      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fc66 	bl	8004a58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0208 	orr.w	r2, r2, #8
 800419a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0204 	bic.w	r2, r2, #4
 80041aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80041be:	e023      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fcb0 	bl	8004b2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	021a      	lsls	r2, r3, #8
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004200:	e002      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
      break;
 8004206:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004210:	7dfb      	ldrb	r3, [r7, #23]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop

0800421c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_TIM_ConfigClockSource+0x1c>
 8004234:	2302      	movs	r3, #2
 8004236:	e0f6      	b.n	8004426 <HAL_TIM_ConfigClockSource+0x20a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800425a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a6f      	ldr	r2, [pc, #444]	; (8004430 <HAL_TIM_ConfigClockSource+0x214>)
 8004272:	4293      	cmp	r3, r2
 8004274:	f000 80c1 	beq.w	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 8004278:	4a6d      	ldr	r2, [pc, #436]	; (8004430 <HAL_TIM_ConfigClockSource+0x214>)
 800427a:	4293      	cmp	r3, r2
 800427c:	f200 80c6 	bhi.w	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 8004280:	4a6c      	ldr	r2, [pc, #432]	; (8004434 <HAL_TIM_ConfigClockSource+0x218>)
 8004282:	4293      	cmp	r3, r2
 8004284:	f000 80b9 	beq.w	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 8004288:	4a6a      	ldr	r2, [pc, #424]	; (8004434 <HAL_TIM_ConfigClockSource+0x218>)
 800428a:	4293      	cmp	r3, r2
 800428c:	f200 80be 	bhi.w	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 8004290:	4a69      	ldr	r2, [pc, #420]	; (8004438 <HAL_TIM_ConfigClockSource+0x21c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f000 80b1 	beq.w	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 8004298:	4a67      	ldr	r2, [pc, #412]	; (8004438 <HAL_TIM_ConfigClockSource+0x21c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f200 80b6 	bhi.w	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 80042a0:	4a66      	ldr	r2, [pc, #408]	; (800443c <HAL_TIM_ConfigClockSource+0x220>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	f000 80a9 	beq.w	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 80042a8:	4a64      	ldr	r2, [pc, #400]	; (800443c <HAL_TIM_ConfigClockSource+0x220>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	f200 80ae 	bhi.w	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 80042b0:	4a63      	ldr	r2, [pc, #396]	; (8004440 <HAL_TIM_ConfigClockSource+0x224>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	f000 80a1 	beq.w	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 80042b8:	4a61      	ldr	r2, [pc, #388]	; (8004440 <HAL_TIM_ConfigClockSource+0x224>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f200 80a6 	bhi.w	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 80042c0:	4a60      	ldr	r2, [pc, #384]	; (8004444 <HAL_TIM_ConfigClockSource+0x228>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	f000 8099 	beq.w	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 80042c8:	4a5e      	ldr	r2, [pc, #376]	; (8004444 <HAL_TIM_ConfigClockSource+0x228>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	f200 809e 	bhi.w	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 80042d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80042d4:	f000 8091 	beq.w	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 80042d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80042dc:	f200 8096 	bhi.w	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 80042e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e4:	f000 8089 	beq.w	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 80042e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ec:	f200 808e 	bhi.w	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 80042f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f4:	d03e      	beq.n	8004374 <HAL_TIM_ConfigClockSource+0x158>
 80042f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fa:	f200 8087 	bhi.w	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 80042fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004302:	f000 8086 	beq.w	8004412 <HAL_TIM_ConfigClockSource+0x1f6>
 8004306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430a:	d87f      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 800430c:	2b70      	cmp	r3, #112	; 0x70
 800430e:	d01a      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x12a>
 8004310:	2b70      	cmp	r3, #112	; 0x70
 8004312:	d87b      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 8004314:	2b60      	cmp	r3, #96	; 0x60
 8004316:	d050      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x19e>
 8004318:	2b60      	cmp	r3, #96	; 0x60
 800431a:	d877      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 800431c:	2b50      	cmp	r3, #80	; 0x50
 800431e:	d03c      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x17e>
 8004320:	2b50      	cmp	r3, #80	; 0x50
 8004322:	d873      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d058      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x1be>
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d86f      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 800432c:	2b30      	cmp	r3, #48	; 0x30
 800432e:	d064      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 8004330:	2b30      	cmp	r3, #48	; 0x30
 8004332:	d86b      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 8004334:	2b20      	cmp	r3, #32
 8004336:	d060      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 8004338:	2b20      	cmp	r3, #32
 800433a:	d867      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x1f0>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d05c      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 8004340:	2b10      	cmp	r3, #16
 8004342:	d05a      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x1de>
 8004344:	e062      	b.n	800440c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004356:	f000 fcd1 	bl	8004cfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	609a      	str	r2, [r3, #8]
      break;
 8004372:	e04f      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004384:	f000 fcba 	bl	8004cfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004396:	609a      	str	r2, [r3, #8]
      break;
 8004398:	e03c      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	461a      	mov	r2, r3
 80043a8:	f000 fc2c 	bl	8004c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2150      	movs	r1, #80	; 0x50
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fc85 	bl	8004cc2 <TIM_ITRx_SetConfig>
      break;
 80043b8:	e02c      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043c6:	461a      	mov	r2, r3
 80043c8:	f000 fc4b 	bl	8004c62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2160      	movs	r1, #96	; 0x60
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fc75 	bl	8004cc2 <TIM_ITRx_SetConfig>
      break;
 80043d8:	e01c      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 fc0c 	bl	8004c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2140      	movs	r1, #64	; 0x40
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fc65 	bl	8004cc2 <TIM_ITRx_SetConfig>
      break;
 80043f8:	e00c      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f000 fc5c 	bl	8004cc2 <TIM_ITRx_SetConfig>
      break;
 800440a:	e003      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      break;
 8004410:	e000      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	00100070 	.word	0x00100070
 8004434:	00100060 	.word	0x00100060
 8004438:	00100050 	.word	0x00100050
 800443c:	00100040 	.word	0x00100040
 8004440:	00100030 	.word	0x00100030
 8004444:	00100020 	.word	0x00100020

08004448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a4c      	ldr	r2, [pc, #304]	; (800458c <TIM_Base_SetConfig+0x144>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d017      	beq.n	8004490 <TIM_Base_SetConfig+0x48>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004466:	d013      	beq.n	8004490 <TIM_Base_SetConfig+0x48>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a49      	ldr	r2, [pc, #292]	; (8004590 <TIM_Base_SetConfig+0x148>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00f      	beq.n	8004490 <TIM_Base_SetConfig+0x48>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a48      	ldr	r2, [pc, #288]	; (8004594 <TIM_Base_SetConfig+0x14c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00b      	beq.n	8004490 <TIM_Base_SetConfig+0x48>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a47      	ldr	r2, [pc, #284]	; (8004598 <TIM_Base_SetConfig+0x150>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_Base_SetConfig+0x48>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a46      	ldr	r2, [pc, #280]	; (800459c <TIM_Base_SetConfig+0x154>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_Base_SetConfig+0x48>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a45      	ldr	r2, [pc, #276]	; (80045a0 <TIM_Base_SetConfig+0x158>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a39      	ldr	r2, [pc, #228]	; (800458c <TIM_Base_SetConfig+0x144>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d023      	beq.n	80044f2 <TIM_Base_SetConfig+0xaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b0:	d01f      	beq.n	80044f2 <TIM_Base_SetConfig+0xaa>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a36      	ldr	r2, [pc, #216]	; (8004590 <TIM_Base_SetConfig+0x148>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01b      	beq.n	80044f2 <TIM_Base_SetConfig+0xaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a35      	ldr	r2, [pc, #212]	; (8004594 <TIM_Base_SetConfig+0x14c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d017      	beq.n	80044f2 <TIM_Base_SetConfig+0xaa>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a34      	ldr	r2, [pc, #208]	; (8004598 <TIM_Base_SetConfig+0x150>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <TIM_Base_SetConfig+0xaa>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a33      	ldr	r2, [pc, #204]	; (800459c <TIM_Base_SetConfig+0x154>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00f      	beq.n	80044f2 <TIM_Base_SetConfig+0xaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a33      	ldr	r2, [pc, #204]	; (80045a4 <TIM_Base_SetConfig+0x15c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <TIM_Base_SetConfig+0xaa>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a32      	ldr	r2, [pc, #200]	; (80045a8 <TIM_Base_SetConfig+0x160>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <TIM_Base_SetConfig+0xaa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a31      	ldr	r2, [pc, #196]	; (80045ac <TIM_Base_SetConfig+0x164>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_Base_SetConfig+0xaa>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2c      	ldr	r2, [pc, #176]	; (80045a0 <TIM_Base_SetConfig+0x158>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d108      	bne.n	8004504 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <TIM_Base_SetConfig+0x144>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <TIM_Base_SetConfig+0x110>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a1a      	ldr	r2, [pc, #104]	; (800459c <TIM_Base_SetConfig+0x154>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00f      	beq.n	8004558 <TIM_Base_SetConfig+0x110>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a1a      	ldr	r2, [pc, #104]	; (80045a4 <TIM_Base_SetConfig+0x15c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <TIM_Base_SetConfig+0x110>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a19      	ldr	r2, [pc, #100]	; (80045a8 <TIM_Base_SetConfig+0x160>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_Base_SetConfig+0x110>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a18      	ldr	r2, [pc, #96]	; (80045ac <TIM_Base_SetConfig+0x164>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0x110>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <TIM_Base_SetConfig+0x158>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d103      	bne.n	8004560 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d105      	bne.n	800457e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	611a      	str	r2, [r3, #16]
  }
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800
 8004598:	40000c00 	.word	0x40000c00
 800459c:	40013400 	.word	0x40013400
 80045a0:	40015000 	.word	0x40015000
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40014800 	.word	0x40014800

080045b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f023 0201 	bic.w	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0303 	bic.w	r3, r3, #3
 80045ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f023 0302 	bic.w	r3, r3, #2
 80045fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a30      	ldr	r2, [pc, #192]	; (80046cc <TIM_OC1_SetConfig+0x11c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d013      	beq.n	8004638 <TIM_OC1_SetConfig+0x88>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a2f      	ldr	r2, [pc, #188]	; (80046d0 <TIM_OC1_SetConfig+0x120>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00f      	beq.n	8004638 <TIM_OC1_SetConfig+0x88>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a2e      	ldr	r2, [pc, #184]	; (80046d4 <TIM_OC1_SetConfig+0x124>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_OC1_SetConfig+0x88>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <TIM_OC1_SetConfig+0x128>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_OC1_SetConfig+0x88>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <TIM_OC1_SetConfig+0x12c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC1_SetConfig+0x88>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a2b      	ldr	r2, [pc, #172]	; (80046e0 <TIM_OC1_SetConfig+0x130>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10c      	bne.n	8004652 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0308 	bic.w	r3, r3, #8
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <TIM_OC1_SetConfig+0x11c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <TIM_OC1_SetConfig+0xd2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <TIM_OC1_SetConfig+0x120>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00f      	beq.n	8004682 <TIM_OC1_SetConfig+0xd2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <TIM_OC1_SetConfig+0x124>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00b      	beq.n	8004682 <TIM_OC1_SetConfig+0xd2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <TIM_OC1_SetConfig+0x128>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <TIM_OC1_SetConfig+0xd2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <TIM_OC1_SetConfig+0x12c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_OC1_SetConfig+0xd2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <TIM_OC1_SetConfig+0x130>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d111      	bne.n	80046a6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40013400 	.word	0x40013400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800
 80046e0:	40015000 	.word	0x40015000

080046e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f023 0210 	bic.w	r2, r3, #16
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 0320 	bic.w	r3, r3, #32
 8004732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <TIM_OC2_SetConfig+0x110>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <TIM_OC2_SetConfig+0x74>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <TIM_OC2_SetConfig+0x114>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_OC2_SetConfig+0x74>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <TIM_OC2_SetConfig+0x118>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d10d      	bne.n	8004774 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004772:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <TIM_OC2_SetConfig+0x110>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <TIM_OC2_SetConfig+0xc0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <TIM_OC2_SetConfig+0x114>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00f      	beq.n	80047a4 <TIM_OC2_SetConfig+0xc0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <TIM_OC2_SetConfig+0x11c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00b      	beq.n	80047a4 <TIM_OC2_SetConfig+0xc0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <TIM_OC2_SetConfig+0x120>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <TIM_OC2_SetConfig+0xc0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <TIM_OC2_SetConfig+0x124>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_OC2_SetConfig+0xc0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <TIM_OC2_SetConfig+0x118>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d113      	bne.n	80047cc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40013400 	.word	0x40013400
 80047fc:	40015000 	.word	0x40015000
 8004800:	40014000 	.word	0x40014000
 8004804:	40014400 	.word	0x40014400
 8004808:	40014800 	.word	0x40014800

0800480c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0303 	bic.w	r3, r3, #3
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a2b      	ldr	r2, [pc, #172]	; (8004918 <TIM_OC3_SetConfig+0x10c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <TIM_OC3_SetConfig+0x72>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a2a      	ldr	r2, [pc, #168]	; (800491c <TIM_OC3_SetConfig+0x110>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_OC3_SetConfig+0x72>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a29      	ldr	r2, [pc, #164]	; (8004920 <TIM_OC3_SetConfig+0x114>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10d      	bne.n	800489a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <TIM_OC3_SetConfig+0x10c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <TIM_OC3_SetConfig+0xbe>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1d      	ldr	r2, [pc, #116]	; (800491c <TIM_OC3_SetConfig+0x110>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00f      	beq.n	80048ca <TIM_OC3_SetConfig+0xbe>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <TIM_OC3_SetConfig+0x118>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00b      	beq.n	80048ca <TIM_OC3_SetConfig+0xbe>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <TIM_OC3_SetConfig+0x11c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <TIM_OC3_SetConfig+0xbe>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a1b      	ldr	r2, [pc, #108]	; (800492c <TIM_OC3_SetConfig+0x120>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <TIM_OC3_SetConfig+0xbe>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a16      	ldr	r2, [pc, #88]	; (8004920 <TIM_OC3_SetConfig+0x114>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d113      	bne.n	80048f2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	621a      	str	r2, [r3, #32]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40013400 	.word	0x40013400
 8004920:	40015000 	.word	0x40015000
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400
 800492c:	40014800 	.word	0x40014800

08004930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800495e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800497e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	031b      	lsls	r3, r3, #12
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a2c      	ldr	r2, [pc, #176]	; (8004a40 <TIM_OC4_SetConfig+0x110>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_OC4_SetConfig+0x74>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a2b      	ldr	r2, [pc, #172]	; (8004a44 <TIM_OC4_SetConfig+0x114>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_OC4_SetConfig+0x74>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a2a      	ldr	r2, [pc, #168]	; (8004a48 <TIM_OC4_SetConfig+0x118>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10d      	bne.n	80049c0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	031b      	lsls	r3, r3, #12
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <TIM_OC4_SetConfig+0x110>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <TIM_OC4_SetConfig+0xc0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <TIM_OC4_SetConfig+0x114>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00f      	beq.n	80049f0 <TIM_OC4_SetConfig+0xc0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a1e      	ldr	r2, [pc, #120]	; (8004a4c <TIM_OC4_SetConfig+0x11c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00b      	beq.n	80049f0 <TIM_OC4_SetConfig+0xc0>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a1d      	ldr	r2, [pc, #116]	; (8004a50 <TIM_OC4_SetConfig+0x120>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_OC4_SetConfig+0xc0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <TIM_OC4_SetConfig+0x124>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_OC4_SetConfig+0xc0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <TIM_OC4_SetConfig+0x118>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d113      	bne.n	8004a18 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	019b      	lsls	r3, r3, #6
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40013400 	.word	0x40013400
 8004a48:	40015000 	.word	0x40015000
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a19      	ldr	r2, [pc, #100]	; (8004b14 <TIM_OC5_SetConfig+0xbc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <TIM_OC5_SetConfig+0x82>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <TIM_OC5_SetConfig+0xc0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_OC5_SetConfig+0x82>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <TIM_OC5_SetConfig+0xc4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_OC5_SetConfig+0x82>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <TIM_OC5_SetConfig+0xc8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_OC5_SetConfig+0x82>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <TIM_OC5_SetConfig+0xcc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_OC5_SetConfig+0x82>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <TIM_OC5_SetConfig+0xd0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d109      	bne.n	8004aee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	621a      	str	r2, [r3, #32]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40013400 	.word	0x40013400
 8004b1c:	40014000 	.word	0x40014000
 8004b20:	40014400 	.word	0x40014400
 8004b24:	40014800 	.word	0x40014800
 8004b28:	40015000 	.word	0x40015000

08004b2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	051b      	lsls	r3, r3, #20
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <TIM_OC6_SetConfig+0xc0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <TIM_OC6_SetConfig+0x84>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <TIM_OC6_SetConfig+0xc4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_OC6_SetConfig+0x84>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <TIM_OC6_SetConfig+0xc8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <TIM_OC6_SetConfig+0x84>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <TIM_OC6_SetConfig+0xcc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_OC6_SetConfig+0x84>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <TIM_OC6_SetConfig+0xd0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC6_SetConfig+0x84>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a15      	ldr	r2, [pc, #84]	; (8004c00 <TIM_OC6_SetConfig+0xd4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d109      	bne.n	8004bc4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	029b      	lsls	r3, r3, #10
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40013400 	.word	0x40013400
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800
 8004c00:	40015000 	.word	0x40015000

08004c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f023 0201 	bic.w	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f023 030a 	bic.w	r3, r3, #10
 8004c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b087      	sub	sp, #28
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f023 0210 	bic.w	r2, r3, #16
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	031b      	lsls	r3, r3, #12
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f043 0307 	orr.w	r3, r3, #7
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	609a      	str	r2, [r3, #8]
}
 8004d30:	bf00      	nop
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	2201      	movs	r2, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1a      	ldr	r2, [r3, #32]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	401a      	ands	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_TIMEx_PWMN_Start+0x24>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e022      	b.n	8004df2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d109      	bne.n	8004dc6 <HAL_TIMEx_PWMN_Start+0x3e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e015      	b.n	8004df2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d109      	bne.n	8004de0 <HAL_TIMEx_PWMN_Start+0x58>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e008      	b.n	8004df2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e073      	b.n	8004ee2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIMEx_PWMN_Start+0x82>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	e013      	b.n	8004e32 <HAL_TIMEx_PWMN_Start+0xaa>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIMEx_PWMN_Start+0x92>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e18:	e00b      	b.n	8004e32 <HAL_TIMEx_PWMN_Start+0xaa>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIMEx_PWMN_Start+0xa2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e28:	e003      	b.n	8004e32 <HAL_TIMEx_PWMN_Start+0xaa>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2204      	movs	r2, #4
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f990 	bl	8005160 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a25      	ldr	r2, [pc, #148]	; (8004eec <HAL_TIMEx_PWMN_Start+0x164>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <HAL_TIMEx_PWMN_Start+0x118>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e62:	d01d      	beq.n	8004ea0 <HAL_TIMEx_PWMN_Start+0x118>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a21      	ldr	r2, [pc, #132]	; (8004ef0 <HAL_TIMEx_PWMN_Start+0x168>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d018      	beq.n	8004ea0 <HAL_TIMEx_PWMN_Start+0x118>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a20      	ldr	r2, [pc, #128]	; (8004ef4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <HAL_TIMEx_PWMN_Start+0x118>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <HAL_TIMEx_PWMN_Start+0x170>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <HAL_TIMEx_PWMN_Start+0x118>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1d      	ldr	r2, [pc, #116]	; (8004efc <HAL_TIMEx_PWMN_Start+0x174>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <HAL_TIMEx_PWMN_Start+0x118>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <HAL_TIMEx_PWMN_Start+0x178>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_TIMEx_PWMN_Start+0x118>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1a      	ldr	r2, [pc, #104]	; (8004f04 <HAL_TIMEx_PWMN_Start+0x17c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d115      	bne.n	8004ecc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <HAL_TIMEx_PWMN_Start+0x180>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b06      	cmp	r3, #6
 8004eb0:	d015      	beq.n	8004ede <HAL_TIMEx_PWMN_Start+0x156>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb8:	d011      	beq.n	8004ede <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eca:	e008      	b.n	8004ede <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e000      	b.n	8004ee0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40013400 	.word	0x40013400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40015000 	.word	0x40015000
 8004f08:	00010007 	.word	0x00010007

08004f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e074      	b.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a34      	ldr	r2, [pc, #208]	; (800501c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a33      	ldr	r2, [pc, #204]	; (8005020 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a31      	ldr	r2, [pc, #196]	; (8005024 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d108      	bne.n	8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a21      	ldr	r2, [pc, #132]	; (800501c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d022      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1f      	ldr	r2, [pc, #124]	; (8005028 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d018      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1d      	ldr	r2, [pc, #116]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a18      	ldr	r2, [pc, #96]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a11      	ldr	r2, [pc, #68]	; (8005024 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10c      	bne.n	8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40013400 	.word	0x40013400
 8005024:	40015000 	.word	0x40015000
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40014000 	.word	0x40014000

08005038 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005050:	2302      	movs	r3, #2
 8005052:	e078      	b.n	8005146 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a19      	ldr	r2, [pc, #100]	; (800515c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d11c      	bne.n	8005134 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	051b      	lsls	r3, r3, #20
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40013400 	.word	0x40013400
 800515c:	40015000 	.word	0x40015000

08005160 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	2204      	movs	r2, #4
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1a      	ldr	r2, [r3, #32]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	43db      	mvns	r3, r3
 8005182:	401a      	ands	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	fa01 f303 	lsl.w	r3, r1, r3
 8005198:	431a      	orrs	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b0:	b08c      	sub	sp, #48	; 0x30
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4baa      	ldr	r3, [pc, #680]	; (8005484 <UART_SetConfig+0x2d8>)
 80051dc:	4013      	ands	r3, r2
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a9f      	ldr	r2, [pc, #636]	; (8005488 <UART_SetConfig+0x2dc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005214:	4313      	orrs	r3, r2
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005222:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800522c:	430b      	orrs	r3, r1
 800522e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	f023 010f 	bic.w	r1, r3, #15
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a90      	ldr	r2, [pc, #576]	; (800548c <UART_SetConfig+0x2e0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d125      	bne.n	800529c <UART_SetConfig+0xf0>
 8005250:	4b8f      	ldr	r3, [pc, #572]	; (8005490 <UART_SetConfig+0x2e4>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b03      	cmp	r3, #3
 800525c:	d81a      	bhi.n	8005294 <UART_SetConfig+0xe8>
 800525e:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0xb8>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005275 	.word	0x08005275
 8005268:	08005285 	.word	0x08005285
 800526c:	0800527d 	.word	0x0800527d
 8005270:	0800528d 	.word	0x0800528d
 8005274:	2301      	movs	r3, #1
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800527a:	e116      	b.n	80054aa <UART_SetConfig+0x2fe>
 800527c:	2302      	movs	r3, #2
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005282:	e112      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800528a:	e10e      	b.n	80054aa <UART_SetConfig+0x2fe>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005292:	e10a      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529a:	e106      	b.n	80054aa <UART_SetConfig+0x2fe>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a7c      	ldr	r2, [pc, #496]	; (8005494 <UART_SetConfig+0x2e8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d138      	bne.n	8005318 <UART_SetConfig+0x16c>
 80052a6:	4b7a      	ldr	r3, [pc, #488]	; (8005490 <UART_SetConfig+0x2e4>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f003 030c 	and.w	r3, r3, #12
 80052b0:	2b0c      	cmp	r3, #12
 80052b2:	d82d      	bhi.n	8005310 <UART_SetConfig+0x164>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x110>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052f1 	.word	0x080052f1
 80052c0:	08005311 	.word	0x08005311
 80052c4:	08005311 	.word	0x08005311
 80052c8:	08005311 	.word	0x08005311
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005311 	.word	0x08005311
 80052d4:	08005311 	.word	0x08005311
 80052d8:	08005311 	.word	0x08005311
 80052dc:	080052f9 	.word	0x080052f9
 80052e0:	08005311 	.word	0x08005311
 80052e4:	08005311 	.word	0x08005311
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005309 	.word	0x08005309
 80052f0:	2300      	movs	r3, #0
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052f6:	e0d8      	b.n	80054aa <UART_SetConfig+0x2fe>
 80052f8:	2302      	movs	r3, #2
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052fe:	e0d4      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005300:	2304      	movs	r3, #4
 8005302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005306:	e0d0      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005308:	2308      	movs	r3, #8
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530e:	e0cc      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005310:	2310      	movs	r3, #16
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005316:	e0c8      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a5e      	ldr	r2, [pc, #376]	; (8005498 <UART_SetConfig+0x2ec>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d125      	bne.n	800536e <UART_SetConfig+0x1c2>
 8005322:	4b5b      	ldr	r3, [pc, #364]	; (8005490 <UART_SetConfig+0x2e4>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800532c:	2b30      	cmp	r3, #48	; 0x30
 800532e:	d016      	beq.n	800535e <UART_SetConfig+0x1b2>
 8005330:	2b30      	cmp	r3, #48	; 0x30
 8005332:	d818      	bhi.n	8005366 <UART_SetConfig+0x1ba>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d00a      	beq.n	800534e <UART_SetConfig+0x1a2>
 8005338:	2b20      	cmp	r3, #32
 800533a:	d814      	bhi.n	8005366 <UART_SetConfig+0x1ba>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <UART_SetConfig+0x19a>
 8005340:	2b10      	cmp	r3, #16
 8005342:	d008      	beq.n	8005356 <UART_SetConfig+0x1aa>
 8005344:	e00f      	b.n	8005366 <UART_SetConfig+0x1ba>
 8005346:	2300      	movs	r3, #0
 8005348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800534c:	e0ad      	b.n	80054aa <UART_SetConfig+0x2fe>
 800534e:	2302      	movs	r3, #2
 8005350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005354:	e0a9      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005356:	2304      	movs	r3, #4
 8005358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800535c:	e0a5      	b.n	80054aa <UART_SetConfig+0x2fe>
 800535e:	2308      	movs	r3, #8
 8005360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005364:	e0a1      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005366:	2310      	movs	r3, #16
 8005368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536c:	e09d      	b.n	80054aa <UART_SetConfig+0x2fe>
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a4a      	ldr	r2, [pc, #296]	; (800549c <UART_SetConfig+0x2f0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d125      	bne.n	80053c4 <UART_SetConfig+0x218>
 8005378:	4b45      	ldr	r3, [pc, #276]	; (8005490 <UART_SetConfig+0x2e4>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005382:	2bc0      	cmp	r3, #192	; 0xc0
 8005384:	d016      	beq.n	80053b4 <UART_SetConfig+0x208>
 8005386:	2bc0      	cmp	r3, #192	; 0xc0
 8005388:	d818      	bhi.n	80053bc <UART_SetConfig+0x210>
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d00a      	beq.n	80053a4 <UART_SetConfig+0x1f8>
 800538e:	2b80      	cmp	r3, #128	; 0x80
 8005390:	d814      	bhi.n	80053bc <UART_SetConfig+0x210>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <UART_SetConfig+0x1f0>
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d008      	beq.n	80053ac <UART_SetConfig+0x200>
 800539a:	e00f      	b.n	80053bc <UART_SetConfig+0x210>
 800539c:	2300      	movs	r3, #0
 800539e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053a2:	e082      	b.n	80054aa <UART_SetConfig+0x2fe>
 80053a4:	2302      	movs	r3, #2
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053aa:	e07e      	b.n	80054aa <UART_SetConfig+0x2fe>
 80053ac:	2304      	movs	r3, #4
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053b2:	e07a      	b.n	80054aa <UART_SetConfig+0x2fe>
 80053b4:	2308      	movs	r3, #8
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ba:	e076      	b.n	80054aa <UART_SetConfig+0x2fe>
 80053bc:	2310      	movs	r3, #16
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c2:	e072      	b.n	80054aa <UART_SetConfig+0x2fe>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a35      	ldr	r2, [pc, #212]	; (80054a0 <UART_SetConfig+0x2f4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d12a      	bne.n	8005424 <UART_SetConfig+0x278>
 80053ce:	4b30      	ldr	r3, [pc, #192]	; (8005490 <UART_SetConfig+0x2e4>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053dc:	d01a      	beq.n	8005414 <UART_SetConfig+0x268>
 80053de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e2:	d81b      	bhi.n	800541c <UART_SetConfig+0x270>
 80053e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e8:	d00c      	beq.n	8005404 <UART_SetConfig+0x258>
 80053ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ee:	d815      	bhi.n	800541c <UART_SetConfig+0x270>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <UART_SetConfig+0x250>
 80053f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f8:	d008      	beq.n	800540c <UART_SetConfig+0x260>
 80053fa:	e00f      	b.n	800541c <UART_SetConfig+0x270>
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005402:	e052      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005404:	2302      	movs	r3, #2
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800540a:	e04e      	b.n	80054aa <UART_SetConfig+0x2fe>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005412:	e04a      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800541a:	e046      	b.n	80054aa <UART_SetConfig+0x2fe>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005422:	e042      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a17      	ldr	r2, [pc, #92]	; (8005488 <UART_SetConfig+0x2dc>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d13a      	bne.n	80054a4 <UART_SetConfig+0x2f8>
 800542e:	4b18      	ldr	r3, [pc, #96]	; (8005490 <UART_SetConfig+0x2e4>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800543c:	d01a      	beq.n	8005474 <UART_SetConfig+0x2c8>
 800543e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005442:	d81b      	bhi.n	800547c <UART_SetConfig+0x2d0>
 8005444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005448:	d00c      	beq.n	8005464 <UART_SetConfig+0x2b8>
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544e:	d815      	bhi.n	800547c <UART_SetConfig+0x2d0>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <UART_SetConfig+0x2b0>
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005458:	d008      	beq.n	800546c <UART_SetConfig+0x2c0>
 800545a:	e00f      	b.n	800547c <UART_SetConfig+0x2d0>
 800545c:	2300      	movs	r3, #0
 800545e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005462:	e022      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005464:	2302      	movs	r3, #2
 8005466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800546a:	e01e      	b.n	80054aa <UART_SetConfig+0x2fe>
 800546c:	2304      	movs	r3, #4
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005472:	e01a      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800547a:	e016      	b.n	80054aa <UART_SetConfig+0x2fe>
 800547c:	2310      	movs	r3, #16
 800547e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005482:	e012      	b.n	80054aa <UART_SetConfig+0x2fe>
 8005484:	cfff69f3 	.word	0xcfff69f3
 8005488:	40008000 	.word	0x40008000
 800548c:	40013800 	.word	0x40013800
 8005490:	40021000 	.word	0x40021000
 8005494:	40004400 	.word	0x40004400
 8005498:	40004800 	.word	0x40004800
 800549c:	40004c00 	.word	0x40004c00
 80054a0:	40005000 	.word	0x40005000
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4aae      	ldr	r2, [pc, #696]	; (8005768 <UART_SetConfig+0x5bc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	f040 8097 	bne.w	80055e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d823      	bhi.n	8005506 <UART_SetConfig+0x35a>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0x318>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054e9 	.word	0x080054e9
 80054c8:	08005507 	.word	0x08005507
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	08005507 	.word	0x08005507
 80054d4:	080054f7 	.word	0x080054f7
 80054d8:	08005507 	.word	0x08005507
 80054dc:	08005507 	.word	0x08005507
 80054e0:	08005507 	.word	0x08005507
 80054e4:	080054ff 	.word	0x080054ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e8:	f7fe f8fa 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 80054ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054ee:	e010      	b.n	8005512 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f0:	4b9e      	ldr	r3, [pc, #632]	; (800576c <UART_SetConfig+0x5c0>)
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054f4:	e00d      	b.n	8005512 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f6:	f7fe f885 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054fc:	e009      	b.n	8005512 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005504:	e005      	b.n	8005512 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8130 	beq.w	800577a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	4a94      	ldr	r2, [pc, #592]	; (8005770 <UART_SetConfig+0x5c4>)
 8005520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005524:	461a      	mov	r2, r3
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	fbb3 f3f2 	udiv	r3, r3, r2
 800552c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	4413      	add	r3, r2
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	429a      	cmp	r2, r3
 800553c:	d305      	bcc.n	800554a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	429a      	cmp	r2, r3
 8005548:	d903      	bls.n	8005552 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005550:	e113      	b.n	800577a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	2200      	movs	r2, #0
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	60fa      	str	r2, [r7, #12]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	4a84      	ldr	r2, [pc, #528]	; (8005770 <UART_SetConfig+0x5c4>)
 8005560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005564:	b29b      	uxth	r3, r3
 8005566:	2200      	movs	r2, #0
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005570:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005574:	f7fa fe50 	bl	8000218 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4610      	mov	r0, r2
 800557e:	4619      	mov	r1, r3
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	020b      	lsls	r3, r1, #8
 800558a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800558e:	0202      	lsls	r2, r0, #8
 8005590:	6979      	ldr	r1, [r7, #20]
 8005592:	6849      	ldr	r1, [r1, #4]
 8005594:	0849      	lsrs	r1, r1, #1
 8005596:	2000      	movs	r0, #0
 8005598:	460c      	mov	r4, r1
 800559a:	4605      	mov	r5, r0
 800559c:	eb12 0804 	adds.w	r8, r2, r4
 80055a0:	eb43 0905 	adc.w	r9, r3, r5
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	469a      	mov	sl, r3
 80055ac:	4693      	mov	fp, r2
 80055ae:	4652      	mov	r2, sl
 80055b0:	465b      	mov	r3, fp
 80055b2:	4640      	mov	r0, r8
 80055b4:	4649      	mov	r1, r9
 80055b6:	f7fa fe2f 	bl	8000218 <__aeabi_uldivmod>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4613      	mov	r3, r2
 80055c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055c8:	d308      	bcc.n	80055dc <UART_SetConfig+0x430>
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d0:	d204      	bcs.n	80055dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a3a      	ldr	r2, [r7, #32]
 80055d8:	60da      	str	r2, [r3, #12]
 80055da:	e0ce      	b.n	800577a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055e2:	e0ca      	b.n	800577a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	d166      	bne.n	80056bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80055ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d827      	bhi.n	8005646 <UART_SetConfig+0x49a>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <UART_SetConfig+0x450>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	08005621 	.word	0x08005621
 8005600:	08005629 	.word	0x08005629
 8005604:	08005631 	.word	0x08005631
 8005608:	08005647 	.word	0x08005647
 800560c:	08005637 	.word	0x08005637
 8005610:	08005647 	.word	0x08005647
 8005614:	08005647 	.word	0x08005647
 8005618:	08005647 	.word	0x08005647
 800561c:	0800563f 	.word	0x0800563f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005620:	f7fe f85e 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 8005624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005626:	e014      	b.n	8005652 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005628:	f7fe f870 	bl	800370c <HAL_RCC_GetPCLK2Freq>
 800562c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800562e:	e010      	b.n	8005652 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005630:	4b4e      	ldr	r3, [pc, #312]	; (800576c <UART_SetConfig+0x5c0>)
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005634:	e00d      	b.n	8005652 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005636:	f7fd ffe5 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 800563a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800563c:	e009      	b.n	8005652 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005644:	e005      	b.n	8005652 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005650:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8090 	beq.w	800577a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	4a44      	ldr	r2, [pc, #272]	; (8005770 <UART_SetConfig+0x5c4>)
 8005660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005664:	461a      	mov	r2, r3
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	fbb3 f3f2 	udiv	r3, r3, r2
 800566c:	005a      	lsls	r2, r3, #1
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	441a      	add	r2, r3
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	2b0f      	cmp	r3, #15
 8005684:	d916      	bls.n	80056b4 <UART_SetConfig+0x508>
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568c:	d212      	bcs.n	80056b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f023 030f 	bic.w	r3, r3, #15
 8005696:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	b29b      	uxth	r3, r3
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	8bfb      	ldrh	r3, [r7, #30]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	8bfa      	ldrh	r2, [r7, #30]
 80056b0:	60da      	str	r2, [r3, #12]
 80056b2:	e062      	b.n	800577a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056ba:	e05e      	b.n	800577a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d828      	bhi.n	8005716 <UART_SetConfig+0x56a>
 80056c4:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x520>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056f9 	.word	0x080056f9
 80056d4:	08005701 	.word	0x08005701
 80056d8:	08005717 	.word	0x08005717
 80056dc:	08005707 	.word	0x08005707
 80056e0:	08005717 	.word	0x08005717
 80056e4:	08005717 	.word	0x08005717
 80056e8:	08005717 	.word	0x08005717
 80056ec:	0800570f 	.word	0x0800570f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f0:	f7fd fff6 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 80056f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056f6:	e014      	b.n	8005722 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f8:	f7fe f808 	bl	800370c <HAL_RCC_GetPCLK2Freq>
 80056fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056fe:	e010      	b.n	8005722 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005700:	4b1a      	ldr	r3, [pc, #104]	; (800576c <UART_SetConfig+0x5c0>)
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005704:	e00d      	b.n	8005722 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005706:	f7fd ff7d 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 800570a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800570c:	e009      	b.n	8005722 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800570e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005714:	e005      	b.n	8005722 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005720:	bf00      	nop
    }

    if (pclk != 0U)
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	d028      	beq.n	800577a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	4a10      	ldr	r2, [pc, #64]	; (8005770 <UART_SetConfig+0x5c4>)
 800572e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005732:	461a      	mov	r2, r3
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	fbb3 f2f2 	udiv	r2, r3, r2
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	441a      	add	r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	fbb2 f3f3 	udiv	r3, r2, r3
 800574a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	2b0f      	cmp	r3, #15
 8005750:	d910      	bls.n	8005774 <UART_SetConfig+0x5c8>
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005758:	d20c      	bcs.n	8005774 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	b29a      	uxth	r2, r3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60da      	str	r2, [r3, #12]
 8005764:	e009      	b.n	800577a <UART_SetConfig+0x5ce>
 8005766:	bf00      	nop
 8005768:	40008000 	.word	0x40008000
 800576c:	00f42400 	.word	0x00f42400
 8005770:	08005fb8 	.word	0x08005fb8
      }
      else
      {
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2201      	movs	r2, #1
 800577e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2201      	movs	r2, #1
 8005786:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2200      	movs	r2, #0
 800578e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2200      	movs	r2, #0
 8005794:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005796:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800579a:	4618      	mov	r0, r3
 800579c:	3730      	adds	r7, #48	; 0x30
 800579e:	46bd      	mov	sp, r7
 80057a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01a      	beq.n	80058ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a2:	d10a      	bne.n	80058ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	605a      	str	r2, [r3, #4]
  }
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b098      	sub	sp, #96	; 0x60
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f8:	f7fb fc46 	bl	8001188 <HAL_GetTick>
 80058fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b08      	cmp	r3, #8
 800590a:	d12f      	bne.n	800596c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800590c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005914:	2200      	movs	r2, #0
 8005916:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f88e 	bl	8005a3c <UART_WaitOnFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d022      	beq.n	800596c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593a:	653b      	str	r3, [r7, #80]	; 0x50
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005944:	647b      	str	r3, [r7, #68]	; 0x44
 8005946:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800594a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e6      	bne.n	8005926 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e063      	b.n	8005a34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b04      	cmp	r3, #4
 8005978:	d149      	bne.n	8005a0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800597a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005982:	2200      	movs	r2, #0
 8005984:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f857 	bl	8005a3c <UART_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d03c      	beq.n	8005a0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	623b      	str	r3, [r7, #32]
   return(result);
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b2:	633b      	str	r3, [r7, #48]	; 0x30
 80059b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e6      	bne.n	8005994 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e6:	61fa      	str	r2, [r7, #28]
 80059e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	69b9      	ldr	r1, [r7, #24]
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	617b      	str	r3, [r7, #20]
   return(result);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e5      	bne.n	80059c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e012      	b.n	8005a34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3758      	adds	r7, #88	; 0x58
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4c:	e04f      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d04b      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a56:	f7fb fb97 	bl	8001188 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d302      	bcc.n	8005a6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e04e      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d037      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b80      	cmp	r3, #128	; 0x80
 8005a82:	d034      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d031      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d110      	bne.n	8005aba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f838 	bl	8005b16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e029      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac8:	d111      	bne.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ad2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f81e 	bl	8005b16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e00f      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4013      	ands	r3, r2
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d0a0      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b095      	sub	sp, #84	; 0x54
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e6      	bne.n	8005b1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b66:	f023 0301 	bic.w	r3, r3, #1
 8005b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3308      	adds	r3, #8
 8005b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e3      	bne.n	8005b50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d118      	bne.n	8005bc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f023 0310 	bic.w	r3, r3, #16
 8005ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6979      	ldr	r1, [r7, #20]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	613b      	str	r3, [r7, #16]
   return(result);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e6      	bne.n	8005b90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bd6:	bf00      	nop
 8005bd8:	3754      	adds	r7, #84	; 0x54
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	607a      	str	r2, [r7, #4]
 8005bee:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e058      	b.n	8005cac <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7fb f965 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2224      	movs	r2, #36	; 0x24
 8005c16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0201 	bic.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff fdb6 	bl	80057a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff fab7 	bl	80051ac <UART_SetConfig>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e031      	b.n	8005cac <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c56:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	055b      	lsls	r3, r3, #21
 8005c70:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	041b      	lsls	r3, r3, #16
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8005c86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	6979      	ldr	r1, [r7, #20]
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff fe1f 	bl	80058e8 <UART_CheckIdleState>
 8005caa:	4603      	mov	r3, r0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_UARTEx_DisableFifoMode+0x16>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e027      	b.n	8005d1a <HAL_UARTEx_DisableFifoMode+0x66>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2224      	movs	r2, #36	; 0x24
 8005cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e02d      	b.n	8005d9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2224      	movs	r2, #36	; 0x24
 8005d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f850 	bl	8005e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e02d      	b.n	8005e16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2224      	movs	r2, #36	; 0x24
 8005dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f812 	bl	8005e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d108      	bne.n	8005e42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e40:	e031      	b.n	8005ea6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e42:	2308      	movs	r3, #8
 8005e44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e46:	2308      	movs	r3, #8
 8005e48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	0e5b      	lsrs	r3, r3, #25
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	0f5b      	lsrs	r3, r3, #29
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e6a:	7bbb      	ldrb	r3, [r7, #14]
 8005e6c:	7b3a      	ldrb	r2, [r7, #12]
 8005e6e:	4911      	ldr	r1, [pc, #68]	; (8005eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8005e70:	5c8a      	ldrb	r2, [r1, r2]
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e76:	7b3a      	ldrb	r2, [r7, #12]
 8005e78:	490f      	ldr	r1, [pc, #60]	; (8005eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8005e7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	7b7a      	ldrb	r2, [r7, #13]
 8005e8c:	4909      	ldr	r1, [pc, #36]	; (8005eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8005e8e:	5c8a      	ldrb	r2, [r1, r2]
 8005e90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e94:	7b7a      	ldrb	r2, [r7, #13]
 8005e96:	4908      	ldr	r1, [pc, #32]	; (8005eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8005e98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	08005fd0 	.word	0x08005fd0
 8005eb8:	08005fd8 	.word	0x08005fd8

08005ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ec4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005ec8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	4013      	ands	r3, r2
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	1d3b      	adds	r3, r7, #4
 8005efc:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <memset>:
 8005f2e:	4402      	add	r2, r0
 8005f30:	4603      	mov	r3, r0
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d100      	bne.n	8005f38 <memset+0xa>
 8005f36:	4770      	bx	lr
 8005f38:	f803 1b01 	strb.w	r1, [r3], #1
 8005f3c:	e7f9      	b.n	8005f32 <memset+0x4>
	...

08005f40 <__libc_init_array>:
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	4d0d      	ldr	r5, [pc, #52]	; (8005f78 <__libc_init_array+0x38>)
 8005f44:	4c0d      	ldr	r4, [pc, #52]	; (8005f7c <__libc_init_array+0x3c>)
 8005f46:	1b64      	subs	r4, r4, r5
 8005f48:	10a4      	asrs	r4, r4, #2
 8005f4a:	2600      	movs	r6, #0
 8005f4c:	42a6      	cmp	r6, r4
 8005f4e:	d109      	bne.n	8005f64 <__libc_init_array+0x24>
 8005f50:	4d0b      	ldr	r5, [pc, #44]	; (8005f80 <__libc_init_array+0x40>)
 8005f52:	4c0c      	ldr	r4, [pc, #48]	; (8005f84 <__libc_init_array+0x44>)
 8005f54:	f000 f818 	bl	8005f88 <_init>
 8005f58:	1b64      	subs	r4, r4, r5
 8005f5a:	10a4      	asrs	r4, r4, #2
 8005f5c:	2600      	movs	r6, #0
 8005f5e:	42a6      	cmp	r6, r4
 8005f60:	d105      	bne.n	8005f6e <__libc_init_array+0x2e>
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f68:	4798      	blx	r3
 8005f6a:	3601      	adds	r6, #1
 8005f6c:	e7ee      	b.n	8005f4c <__libc_init_array+0xc>
 8005f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f72:	4798      	blx	r3
 8005f74:	3601      	adds	r6, #1
 8005f76:	e7f2      	b.n	8005f5e <__libc_init_array+0x1e>
 8005f78:	08005fe8 	.word	0x08005fe8
 8005f7c:	08005fe8 	.word	0x08005fe8
 8005f80:	08005fe8 	.word	0x08005fe8
 8005f84:	08005fec 	.word	0x08005fec

08005f88 <_init>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr

08005f94 <_fini>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	bf00      	nop
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr
