
25BMD_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005b88  08005b88  00015b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc8  08005bc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd0  08005bd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  2000000c  08005be4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08005be4  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ed1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d2f  00000000  00000000  00039f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118b  00000000  00000000  0003e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c07  00000000  00000000  0003f493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197c0  00000000  00000000  0006809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011674f  00000000  00000000  0008185a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006288  00000000  00000000  00197fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0019e234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005b70 	.word	0x08005b70

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005b70 	.word	0x08005b70

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fde4 	bl	80010e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f83b 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fab3 	bl	8000a8c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000526:	f000 f883 	bl	8000630 <MX_ADC2_Init>
  MX_FDCAN2_Init();
 800052a:	f000 f8e7 	bl	80006fc <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 800052e:	f000 f92b 	bl	8000788 <MX_FDCAN3_Init>
  MX_TIM1_Init();
 8000532:	f000 f96f 	bl	8000814 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000536:	f000 fa31 	bl	800099c <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 800053a:	f000 fa7f 	bl	8000a3c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  TIM_OC_InitTypeDef sConfigOC = {0}; // sConfigOC を宣言し初期化
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
 800054c:	615a      	str	r2, [r3, #20]
 800054e:	619a      	str	r2, [r3, #24]

  // PWM設定を初期化
  sConfigOC.OCMode = TIM_OCMODE_PWM1; // PWMモード
 8000550:	2360      	movs	r3, #96	; 0x60
 8000552:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;                // デューティ比を50に初期化
 8000554:	2332      	movs	r3, #50	; 0x32
 8000556:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH; // 出力極性
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;  // 高速モードを無効
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	4619      	mov	r1, r3
 8000566:	480b      	ldr	r0, [pc, #44]	; (8000594 <main+0x80>)
 8000568:	f003 fc46 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <main+0x62>
      Error_Handler();
 8000572:	f000 faff 	bl	8000b74 <Error_Handler>
  }
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2200      	movs	r2, #0
 800057a:	4619      	mov	r1, r3
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <main+0x80>)
 800057e:	f003 fc3b 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,50000);
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <main+0x80>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f24c 3250 	movw	r2, #50000	; 0xc350
 800058a:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(100);
 800058c:	2064      	movs	r0, #100	; 0x64
 800058e:	f000 fe1b 	bl	80011c8 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,50000);
 8000592:	e7f6      	b.n	8000582 <main+0x6e>
 8000594:	2000015c 	.word	0x2000015c

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	2238      	movs	r2, #56	; 0x38
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 fab5 	bl	8005b16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f002 fb34 	bl	8002c28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005c0:	2321      	movs	r3, #33	; 0x21
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ca:	2301      	movs	r3, #1
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	2303      	movs	r3, #3
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80005da:	232a      	movs	r3, #42	; 0x2a
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fbce 	bl	8002d90 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005fa:	f000 fabb 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2303      	movs	r3, #3
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2104      	movs	r1, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fecc 	bl	80033b4 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000622:	f000 faa7 	bl	8000b74 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2220      	movs	r2, #32
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f005 fa6a 	bl	8005b16 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_ADC2_Init+0xc0>)
 8000644:	4a2b      	ldr	r2, [pc, #172]	; (80006f4 <MX_ADC2_Init+0xc4>)
 8000646:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000648:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_ADC2_Init+0xc0>)
 800064a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800064e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_ADC2_Init+0xc0>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_ADC2_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_ADC2_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <MX_ADC2_Init+0xc0>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_ADC2_Init+0xc0>)
 800066a:	2204      	movs	r2, #4
 800066c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <MX_ADC2_Init+0xc0>)
 8000670:	2200      	movs	r2, #0
 8000672:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_ADC2_Init+0xc0>)
 8000676:	2200      	movs	r2, #0
 8000678:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_ADC2_Init+0xc0>)
 800067c:	2201      	movs	r2, #1
 800067e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_ADC2_Init+0xc0>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_ADC2_Init+0xc0>)
 800068a:	2200      	movs	r2, #0
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_ADC2_Init+0xc0>)
 8000690:	2200      	movs	r2, #0
 8000692:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_ADC2_Init+0xc0>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_ADC2_Init+0xc0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_ADC2_Init+0xc0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006aa:	4811      	ldr	r0, [pc, #68]	; (80006f0 <MX_ADC2_Init+0xc0>)
 80006ac:	f000 ff84 	bl	80015b8 <HAL_ADC_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80006b6:	f000 fa5d 	bl	8000b74 <Error_Handler>

  /** Configure Regular Channel
  */


  sConfig.Channel = ADC_CHANNEL_3;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC2_Init+0xc8>)
 80006bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006be:	2306      	movs	r3, #6
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006c6:	237f      	movs	r3, #127	; 0x7f
 80006c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ca:	2304      	movs	r3, #4
 80006cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <MX_ADC2_Init+0xc0>)
 80006d8:	f001 f92a 	bl	8001930 <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006e2:	f000 fa47 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3720      	adds	r7, #32
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028
 80006f4:	50000100 	.word	0x50000100
 80006f8:	0c900008 	.word	0x0c900008

080006fc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000702:	4a20      	ldr	r2, [pc, #128]	; (8000784 <MX_FDCAN2_Init+0x88>)
 8000704:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_FDCAN2_Init+0x84>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_FDCAN2_Init+0x84>)
 800071a:	2200      	movs	r2, #0
 800071c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000720:	2200      	movs	r2, #0
 8000722:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000726:	2200      	movs	r2, #0
 8000728:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_FDCAN2_Init+0x84>)
 800072c:	2210      	movs	r2, #16
 800072e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000732:	2201      	movs	r2, #1
 8000734:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000738:	2202      	movs	r2, #2
 800073a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_FDCAN2_Init+0x84>)
 800073e:	2202      	movs	r2, #2
 8000740:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000744:	2201      	movs	r2, #1
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_FDCAN2_Init+0x84>)
 800074a:	2201      	movs	r2, #1
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000750:	2201      	movs	r2, #1
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000756:	2201      	movs	r2, #1
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_FDCAN2_Init+0x84>)
 800075c:	2200      	movs	r2, #0
 800075e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000762:	2200      	movs	r2, #0
 8000764:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_FDCAN2_Init+0x84>)
 8000768:	2200      	movs	r2, #0
 800076a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_FDCAN2_Init+0x84>)
 800076e:	f001 fe03 	bl	8002378 <HAL_FDCAN_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000778:	f000 f9fc 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000094 	.word	0x20000094
 8000784:	40006800 	.word	0x40006800

08000788 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_FDCAN3_Init+0x84>)
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <MX_FDCAN3_Init+0x88>)
 8000790:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_FDCAN3_Init+0x84>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_FDCAN3_Init+0x84>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007b8:	2210      	movs	r2, #16
 80007ba:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007be:	2201      	movs	r2, #1
 80007c0:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007dc:	2201      	movs	r2, #1
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_FDCAN3_Init+0x84>)
 80007fa:	f001 fdbd 	bl	8002378 <HAL_FDCAN_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8000804:	f000 f9b6 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000f8 	.word	0x200000f8
 8000810:	40006c00 	.word	0x40006c00

08000814 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	; 0x70
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000834:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
 8000844:	615a      	str	r2, [r3, #20]
 8000846:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2234      	movs	r2, #52	; 0x34
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f005 f961 	bl	8005b16 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000854:	4b4f      	ldr	r3, [pc, #316]	; (8000994 <MX_TIM1_Init+0x180>)
 8000856:	4a50      	ldr	r2, [pc, #320]	; (8000998 <MX_TIM1_Init+0x184>)
 8000858:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800085a:	4b4e      	ldr	r3, [pc, #312]	; (8000994 <MX_TIM1_Init+0x180>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b4c      	ldr	r3, [pc, #304]	; (8000994 <MX_TIM1_Init+0x180>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1680 - 1;
 8000866:	4b4b      	ldr	r3, [pc, #300]	; (8000994 <MX_TIM1_Init+0x180>)
 8000868:	f240 628f 	movw	r2, #1679	; 0x68f
 800086c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b49      	ldr	r3, [pc, #292]	; (8000994 <MX_TIM1_Init+0x180>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000874:	4b47      	ldr	r3, [pc, #284]	; (8000994 <MX_TIM1_Init+0x180>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b46      	ldr	r3, [pc, #280]	; (8000994 <MX_TIM1_Init+0x180>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000880:	4844      	ldr	r0, [pc, #272]	; (8000994 <MX_TIM1_Init+0x180>)
 8000882:	f003 fa01 	bl	8003c88 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800088c:	f000 f972 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800089a:	4619      	mov	r1, r3
 800089c:	483d      	ldr	r0, [pc, #244]	; (8000994 <MX_TIM1_Init+0x180>)
 800089e:	f003 fbbf 	bl	8004020 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008a8:	f000 f964 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ac:	4839      	ldr	r0, [pc, #228]	; (8000994 <MX_TIM1_Init+0x180>)
 80008ae:	f003 fa42 	bl	8003d36 <HAL_TIM_PWM_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008b8:	f000 f95c 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008cc:	4619      	mov	r1, r3
 80008ce:	4831      	ldr	r0, [pc, #196]	; (8000994 <MX_TIM1_Init+0x180>)
 80008d0:	f004 f936 	bl	8004b40 <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008da:	f000 f94b 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008de:	2360      	movs	r3, #96	; 0x60
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e6:	2300      	movs	r3, #0
 80008e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ea:	2300      	movs	r3, #0
 80008ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	653b      	str	r3, [r7, #80]	; 0x50
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 80008fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	4824      	ldr	r0, [pc, #144]	; (8000994 <MX_TIM1_Init+0x180>)
 8000904:	f003 fa78 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000908:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	4820      	ldr	r0, [pc, #128]	; (8000994 <MX_TIM1_Init+0x180>)
 8000912:	f003 fa71 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 800091c:	f000 f92a 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000920:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000924:	2204      	movs	r2, #4
 8000926:	4619      	mov	r1, r3
 8000928:	481a      	ldr	r0, [pc, #104]	; (8000994 <MX_TIM1_Init+0x180>)
 800092a:	f003 fa65 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000934:	f000 f91e 	bl	8000b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800095e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <MX_TIM1_Init+0x180>)
 8000976:	f004 f979 	bl	8004c6c <HAL_TIMEx_ConfigBreakDeadTime>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000980:	f000 f8f8 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <MX_TIM1_Init+0x180>)
 8000986:	f000 fa67 	bl	8000e58 <HAL_TIM_MspPostInit>

}
 800098a:	bf00      	nop
 800098c:	3770      	adds	r7, #112	; 0x70
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000015c 	.word	0x2000015c
 8000998:	40012c00 	.word	0x40012c00

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009a2:	4a25      	ldr	r2, [pc, #148]	; (8000a38 <MX_USART2_UART_Init+0x9c>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80009e4:	2300      	movs	r3, #0
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	4812      	ldr	r0, [pc, #72]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009ec:	f004 feed 	bl	80057ca <HAL_RS485Ex_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 80009f6:	f000 f8bd 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 80009fe:	f004 ff86 	bl	800590e <HAL_UARTEx_SetTxFifoThreshold>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 8000a08:	f000 f8b4 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 8000a10:	f004 ffbb 	bl	800598a <HAL_UARTEx_SetRxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 8000a1a:	f000 f8ab 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x98>)
 8000a20:	f004 ff3c 	bl	800589c <HAL_UARTEx_DisableFifoMode>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 8000a2a:	f000 f8a3 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001a8 	.word	0x200001a8
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USB_PCD_Init+0x48>)
 8000a42:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <MX_USB_PCD_Init+0x4c>)
 8000a44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_USB_PCD_Init+0x48>)
 8000a48:	2208      	movs	r2, #8
 8000a4a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <MX_USB_PCD_Init+0x48>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USB_PCD_Init+0x48>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_USB_PCD_Init+0x48>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USB_PCD_Init+0x48>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_USB_PCD_Init+0x48>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USB_PCD_Init+0x48>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_USB_PCD_Init+0x48>)
 8000a72:	f001 ffe1 	bl	8002a38 <HAL_PCD_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a7c:	f000 f87a 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000023c 	.word	0x2000023c
 8000a88:	40005c00 	.word	0x40005c00

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a30      	ldr	r2, [pc, #192]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a2a      	ldr	r2, [pc, #168]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_GPIO_Init+0xdc>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_CAN_Pin|LED_SIG_R_Pin|LED_SIG_F_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000b08:	4818      	ldr	r0, [pc, #96]	; (8000b6c <MX_GPIO_Init+0xe0>)
 8000b0a:	f001 ff7d 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USB_CAN_Pin LED_SIG_R_Pin LED_SIG_F_Pin */
  GPIO_InitStruct.Pin = USB_CAN_Pin|LED_SIG_R_Pin|LED_SIG_F_Pin;
 8000b0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_GPIO_Init+0xe0>)
 8000b28:	f001 fdec 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000b2c:	2330      	movs	r3, #48	; 0x30
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f001 fddf 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Normal_Pin BOOT0_IN_Pin */
  GPIO_InitStruct.Pin = CS_Normal_Pin|BOOT0_IN_Pin;
 8000b46:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_GPIO_Init+0xe4>)
 8000b5c:	f001 fdd2 	bl	8002704 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000800 	.word	0x48000800
 8000b70:	48000400 	.word	0x48000400

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6613      	str	r3, [r2, #96]	; 0x60
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bb6:	f002 f8db 	bl	8002d70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b09e      	sub	sp, #120	; 0x78
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2254      	movs	r2, #84	; 0x54
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 ff94 	bl	8005b16 <memset>
  if(hadc->Instance==ADC2)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <HAL_ADC_MspInit+0xa4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d134      	bne.n	8000c62 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bfc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bfe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c02:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 fdef 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c14:	f7ff ffae 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_ADC_MspInit+0xa8>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <HAL_ADC_MspInit+0xa8>)
 8000c1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_ADC_MspInit+0xa8>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_ADC_MspInit+0xa8>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_ADC_MspInit+0xa8>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_ADC_MspInit+0xa8>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = CS_Sensing_Pin;
 8000c48:	2340      	movs	r3, #64	; 0x40
 8000c4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CS_Sensing_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5e:	f001 fd51 	bl	8002704 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3778      	adds	r7, #120	; 0x78
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	50000100 	.word	0x50000100
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0a2      	sub	sp, #136	; 0x88
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0320 	add.w	r3, r7, #32
 8000c90:	2254      	movs	r2, #84	; 0x54
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f004 ff3e 	bl	8005b16 <memset>
  if(hfdcan->Instance==FDCAN2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a59      	ldr	r2, [pc, #356]	; (8000e04 <HAL_FDCAN_MspInit+0x190>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d143      	bne.n	8000d2c <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fd99 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000cc0:	f7ff ff58 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000cc4:	4b50      	ldr	r3, [pc, #320]	; (8000e08 <HAL_FDCAN_MspInit+0x194>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a4f      	ldr	r2, [pc, #316]	; (8000e08 <HAL_FDCAN_MspInit+0x194>)
 8000ccc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000cce:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <HAL_FDCAN_MspInit+0x194>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d10b      	bne.n	8000cee <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cd6:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	4a4c      	ldr	r2, [pc, #304]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a46      	ldr	r2, [pc, #280]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b44      	ldr	r3, [pc, #272]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d06:	2360      	movs	r3, #96	; 0x60
 8000d08:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000d18:	2309      	movs	r3, #9
 8000d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d22:	4619      	mov	r1, r3
 8000d24:	483a      	ldr	r0, [pc, #232]	; (8000e10 <HAL_FDCAN_MspInit+0x19c>)
 8000d26:	f001 fced 	bl	8002704 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000d2a:	e067      	b.n	8000dfc <HAL_FDCAN_MspInit+0x188>
  else if(hfdcan->Instance==FDCAN3)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a38      	ldr	r2, [pc, #224]	; (8000e14 <HAL_FDCAN_MspInit+0x1a0>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d162      	bne.n	8000dfc <HAL_FDCAN_MspInit+0x188>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000d3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d40:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fd50 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 8000d52:	f7ff ff0f 	bl	8000b74 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <HAL_FDCAN_MspInit+0x194>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	4a2a      	ldr	r2, [pc, #168]	; (8000e08 <HAL_FDCAN_MspInit+0x194>)
 8000d5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <HAL_FDCAN_MspInit+0x194>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d10b      	bne.n	8000d80 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d68:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6c:	4a27      	ldr	r2, [pc, #156]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d72:	6593      	str	r3, [r2, #88]	; 0x58
 8000d74:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_FDCAN_MspInit+0x198>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f001 fc96 	bl	8002704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000dea:	230b      	movs	r3, #11
 8000dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <HAL_FDCAN_MspInit+0x19c>)
 8000df8:	f001 fc84 	bl	8002704 <HAL_GPIO_Init>
}
 8000dfc:	bf00      	nop
 8000dfe:	3788      	adds	r7, #136	; 0x88
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40006800 	.word	0x40006800
 8000e08:	20000518 	.word	0x20000518
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000400 	.word	0x48000400
 8000e14:	40006c00 	.word	0x40006c00

08000e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_TIM_Base_MspInit+0x38>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10b      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_TIM_Base_MspInit+0x3c>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_TIM_Base_MspInit+0x3c>)
 8000e30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e34:	6613      	str	r3, [r2, #96]	; 0x60
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_TIM_Base_MspInit+0x3c>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40012c00 	.word	0x40012c00
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <HAL_TIM_MspPostInit+0xa0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d13a      	bne.n	8000ef0 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_TIM_MspPostInit+0xa4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <HAL_TIM_MspPostInit+0xa4>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_TIM_MspPostInit+0xa4>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_TIM_MspPostInit+0xa4>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_TIM_MspPostInit+0xa4>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_TIM_MspPostInit+0xa4>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000eaa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <HAL_TIM_MspPostInit+0xa8>)
 8000ec8:	f001 fc1c 	bl	8002704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ecc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ede:	2306      	movs	r3, #6
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f001 fc0a 	bl	8002704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40012c00 	.word	0x40012c00
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09e      	sub	sp, #120	; 0x78
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2254      	movs	r2, #84	; 0x54
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 fdf6 	bl	8005b16 <memset>
  if(huart->Instance==USART2)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <HAL_UART_MspInit+0xa8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d136      	bne.n	8000fa2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 fc53 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f4c:	f7ff fe12 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_UART_MspInit+0xac>)
 8000f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f54:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <HAL_UART_MspInit+0xac>)
 8000f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_UART_MspInit+0xac>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_UART_MspInit+0xac>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6c:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_UART_MspInit+0xac>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_UART_MspInit+0xac>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f80:	230e      	movs	r3, #14
 8000f82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f90:	2307      	movs	r3, #7
 8000f92:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f001 fbb1 	bl	8002704 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3778      	adds	r7, #120	; 0x78
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40004400 	.word	0x40004400
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b098      	sub	sp, #96	; 0x60
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2254      	movs	r2, #84	; 0x54
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 fda6 	bl	8005b16 <memset>
  if(hpcd->Instance==USB)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a11      	ldr	r2, [pc, #68]	; (8001014 <HAL_PCD_MspInit+0x60>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d11a      	bne.n	800100a <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fc02 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000fee:	f7ff fdc1 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_PCD_MspInit+0x64>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_PCD_MspInit+0x64>)
 8000ff8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_PCD_MspInit+0x64>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3760      	adds	r7, #96	; 0x60
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40005c00 	.word	0x40005c00
 8001018:	40021000 	.word	0x40021000

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 f890 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001096:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001098:	f7ff ffea 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	; (80010d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <LoopForever+0xe>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	; (80010e0 <LoopForever+0x16>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f004 fd31 	bl	8005b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c6:	f7ff fa25 	bl	8000514 <main>

080010ca <LoopForever>:

LoopForever:
    b LoopForever
 80010ca:	e7fe      	b.n	80010ca <LoopForever>
  ldr   r0, =_estack
 80010cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010d8:	08005bd8 	.word	0x08005bd8
  ldr r2, =_sbss
 80010dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010e0:	20000520 	.word	0x20000520

080010e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_2_IRQHandler>

080010e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f001 f90f 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f80e 	bl	8001118 <HAL_InitTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e001      	b.n	800110c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001108:	f7ff fd3a 	bl	8000b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800110c:	79fb      	ldrb	r3, [r7, #7]

}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_InitTick+0x68>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d022      	beq.n	8001172 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_InitTick+0x6c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_InitTick+0x68>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001138:	fbb1 f3f3 	udiv	r3, r1, r3
 800113c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f001 f90c 	bl	800235e <HAL_SYSTICK_Config>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10f      	bne.n	800116c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	d809      	bhi.n	8001166 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001152:	2200      	movs	r2, #0
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	f04f 30ff 	mov.w	r0, #4294967295
 800115a:	f001 f8e6 	bl	800232a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_InitTick+0x70>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	e007      	b.n	8001176 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e004      	b.n	8001176 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e001      	b.n	8001176 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000008 	.word	0x20000008
 8001184:	20000000 	.word	0x20000000
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_IncTick+0x1c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x20>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4413      	add	r3, r2
 800119a:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <HAL_IncTick+0x1c>)
 800119c:	6013      	str	r3, [r2, #0]
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	2000051c 	.word	0x2000051c
 80011ac:	20000008 	.word	0x20000008

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2000051c 	.word	0x2000051c

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d004      	beq.n	80011ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_Delay+0x40>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ec:	bf00      	nop
 80011ee:	f7ff ffdf 	bl	80011b0 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d8f7      	bhi.n	80011ee <HAL_Delay+0x26>
  {
  }
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000008 	.word	0x20000008

0800120c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	609a      	str	r2, [r3, #8]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	609a      	str	r2, [r3, #8]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3360      	adds	r3, #96	; 0x60
 8001286:	461a      	mov	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <LL_ADC_SetOffset+0x44>)
 8001296:	4013      	ands	r3, r2
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	4313      	orrs	r3, r2
 80012a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012ac:	bf00      	nop
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	03fff000 	.word	0x03fff000

080012bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3360      	adds	r3, #96	; 0x60
 80012ca:	461a      	mov	r2, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3360      	adds	r3, #96	; 0x60
 80012f8:	461a      	mov	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	431a      	orrs	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800131e:	b480      	push	{r7}
 8001320:	b087      	sub	sp, #28
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3360      	adds	r3, #96	; 0x60
 800132e:	461a      	mov	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	431a      	orrs	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3360      	adds	r3, #96	; 0x60
 8001364:	461a      	mov	r2, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	431a      	orrs	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800137e:	bf00      	nop
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	615a      	str	r2, [r3, #20]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3330      	adds	r3, #48	; 0x30
 80013c0:	461a      	mov	r2, r3
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	4413      	add	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	211f      	movs	r1, #31
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	401a      	ands	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	0e9b      	lsrs	r3, r3, #26
 80013e8:	f003 011f 	and.w	r1, r3, #31
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	431a      	orrs	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013fc:	bf00      	nop
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3314      	adds	r3, #20
 8001418:	461a      	mov	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	0e5b      	lsrs	r3, r3, #25
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	4413      	add	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	0d1b      	lsrs	r3, r3, #20
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2107      	movs	r1, #7
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	401a      	ands	r2, r3
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	0d1b      	lsrs	r3, r3, #20
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	431a      	orrs	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001452:	bf00      	nop
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0318 	and.w	r3, r3, #24
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001484:	40d9      	lsrs	r1, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	400b      	ands	r3, r1
 800148a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148e:	431a      	orrs	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	0007ffff 	.word	0x0007ffff

080014a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6093      	str	r3, [r2, #8]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014e0:	d101      	bne.n	80014e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001504:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001508:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001530:	d101      	bne.n	8001536 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <LL_ADC_IsEnabled+0x18>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <LL_ADC_IsEnabled+0x1a>
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b04      	cmp	r3, #4
 800157c:	d101      	bne.n	8001582 <LL_ADC_REG_IsConversionOngoing+0x18>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d101      	bne.n	80015a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e1a9      	b.n	8001926 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff faf1 	bl	8000bc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff67 	bl	80014cc <LL_ADC_IsDeepPowerDownEnabled>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff4d 	bl	80014a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff82 	bl	800151c <LL_ADC_IsInternalRegulatorEnabled>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d115      	bne.n	800164a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff66 	bl	80014f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001628:	4b9c      	ldr	r3, [pc, #624]	; (800189c <HAL_ADC_Init+0x2e4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	4a9c      	ldr	r2, [pc, #624]	; (80018a0 <HAL_ADC_Init+0x2e8>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	3301      	adds	r3, #1
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800163c:	e002      	b.n	8001644 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3b01      	subs	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f9      	bne.n	800163e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff64 	bl	800151c <LL_ADC_IsInternalRegulatorEnabled>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10d      	bne.n	8001676 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	f043 0210 	orr.w	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	f043 0201 	orr.w	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff75 	bl	800156a <LL_ADC_REG_IsConversionOngoing>
 8001680:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 8142 	bne.w	8001914 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 813e 	bne.w	8001914 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016a0:	f043 0202 	orr.w	r2, r3, #2
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff49 	bl	8001544 <LL_ADC_IsEnabled>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d141      	bne.n	800173c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c0:	d004      	beq.n	80016cc <HAL_ADC_Init+0x114>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a77      	ldr	r2, [pc, #476]	; (80018a4 <HAL_ADC_Init+0x2ec>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d10f      	bne.n	80016ec <HAL_ADC_Init+0x134>
 80016cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80016d0:	f7ff ff38 	bl	8001544 <LL_ADC_IsEnabled>
 80016d4:	4604      	mov	r4, r0
 80016d6:	4873      	ldr	r0, [pc, #460]	; (80018a4 <HAL_ADC_Init+0x2ec>)
 80016d8:	f7ff ff34 	bl	8001544 <LL_ADC_IsEnabled>
 80016dc:	4603      	mov	r3, r0
 80016de:	4323      	orrs	r3, r4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	e012      	b.n	8001712 <HAL_ADC_Init+0x15a>
 80016ec:	486e      	ldr	r0, [pc, #440]	; (80018a8 <HAL_ADC_Init+0x2f0>)
 80016ee:	f7ff ff29 	bl	8001544 <LL_ADC_IsEnabled>
 80016f2:	4604      	mov	r4, r0
 80016f4:	486d      	ldr	r0, [pc, #436]	; (80018ac <HAL_ADC_Init+0x2f4>)
 80016f6:	f7ff ff25 	bl	8001544 <LL_ADC_IsEnabled>
 80016fa:	4603      	mov	r3, r0
 80016fc:	431c      	orrs	r4, r3
 80016fe:	486c      	ldr	r0, [pc, #432]	; (80018b0 <HAL_ADC_Init+0x2f8>)
 8001700:	f7ff ff20 	bl	8001544 <LL_ADC_IsEnabled>
 8001704:	4603      	mov	r3, r0
 8001706:	4323      	orrs	r3, r4
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf0c      	ite	eq
 800170c:	2301      	moveq	r3, #1
 800170e:	2300      	movne	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d012      	beq.n	800173c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800171e:	d004      	beq.n	800172a <HAL_ADC_Init+0x172>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a5f      	ldr	r2, [pc, #380]	; (80018a4 <HAL_ADC_Init+0x2ec>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_ADC_Init+0x176>
 800172a:	4a62      	ldr	r2, [pc, #392]	; (80018b4 <HAL_ADC_Init+0x2fc>)
 800172c:	e000      	b.n	8001730 <HAL_ADC_Init+0x178>
 800172e:	4a62      	ldr	r2, [pc, #392]	; (80018b8 <HAL_ADC_Init+0x300>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4619      	mov	r1, r3
 8001736:	4610      	mov	r0, r2
 8001738:	f7ff fd68 	bl	800120c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7f5b      	ldrb	r3, [r3, #29]
 8001740:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001746:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800174c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001752:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800175a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001766:	2b01      	cmp	r3, #1
 8001768:	d106      	bne.n	8001778 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	3b01      	subs	r3, #1
 8001770:	045b      	lsls	r3, r3, #17
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	4b48      	ldr	r3, [pc, #288]	; (80018bc <HAL_ADC_Init+0x304>)
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	69b9      	ldr	r1, [r7, #24]
 80017a4:	430b      	orrs	r3, r1
 80017a6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fee4 	bl	8001590 <LL_ADC_INJ_IsConversionOngoing>
 80017c8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d17f      	bne.n	80018d0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d17c      	bne.n	80018d0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017da:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017e2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017f2:	f023 0302 	bic.w	r3, r3, #2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	69b9      	ldr	r1, [r7, #24]
 80017fc:	430b      	orrs	r3, r1
 80017fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d017      	beq.n	8001838 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001816:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001820:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001824:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6911      	ldr	r1, [r2, #16]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	430b      	orrs	r3, r1
 8001832:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001836:	e013      	b.n	8001860 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001846:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001858:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800185c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001866:	2b01      	cmp	r3, #1
 8001868:	d12a      	bne.n	80018c0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001880:	4311      	orrs	r1, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001886:	4311      	orrs	r1, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800188c:	430a      	orrs	r2, r1
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0201 	orr.w	r2, r2, #1
 8001898:	611a      	str	r2, [r3, #16]
 800189a:	e019      	b.n	80018d0 <HAL_ADC_Init+0x318>
 800189c:	20000000 	.word	0x20000000
 80018a0:	053e2d63 	.word	0x053e2d63
 80018a4:	50000100 	.word	0x50000100
 80018a8:	50000400 	.word	0x50000400
 80018ac:	50000500 	.word	0x50000500
 80018b0:	50000600 	.word	0x50000600
 80018b4:	50000300 	.word	0x50000300
 80018b8:	50000700 	.word	0x50000700
 80018bc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10c      	bne.n	80018f2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f023 010f 	bic.w	r1, r3, #15
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	1e5a      	subs	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	631a      	str	r2, [r3, #48]	; 0x30
 80018f0:	e007      	b.n	8001902 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 020f 	bic.w	r2, r2, #15
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	f023 0303 	bic.w	r3, r3, #3
 800190a:	f043 0201 	orr.w	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	65da      	str	r2, [r3, #92]	; 0x5c
 8001912:	e007      	b.n	8001924 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	f043 0210 	orr.w	r2, r3, #16
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001924:	7ffb      	ldrb	r3, [r7, #31]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}
 800192e:	bf00      	nop

08001930 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b0b6      	sub	sp, #216	; 0xd8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800194a:	2b01      	cmp	r3, #1
 800194c:	d102      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x24>
 800194e:	2302      	movs	r3, #2
 8001950:	f000 bc13 	b.w	800217a <HAL_ADC_ConfigChannel+0x84a>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fe02 	bl	800156a <LL_ADC_REG_IsConversionOngoing>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	f040 83f3 	bne.w	8002154 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6859      	ldr	r1, [r3, #4]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	f7ff fd18 	bl	80013b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fdf0 	bl	800156a <LL_ADC_REG_IsConversionOngoing>
 800198a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fdfc 	bl	8001590 <LL_ADC_INJ_IsConversionOngoing>
 8001998:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800199c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 81d9 	bne.w	8001d58 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 81d4 	bne.w	8001d58 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019b8:	d10f      	bne.n	80019da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff fd1f 	bl	8001408 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fcd9 	bl	800138a <LL_ADC_SetSamplingTimeCommonConfig>
 80019d8:	e00e      	b.n	80019f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6819      	ldr	r1, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	461a      	mov	r2, r3
 80019e8:	f7ff fd0e 	bl	8001408 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fcc9 	bl	800138a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d022      	beq.n	8001a60 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6919      	ldr	r1, [r3, #16]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a2a:	f7ff fc23 	bl	8001274 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6919      	ldr	r1, [r3, #16]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f7ff fc6f 	bl	800131e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x126>
 8001a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a54:	e000      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x128>
 8001a56:	2300      	movs	r3, #0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f7ff fc7b 	bl	8001354 <LL_ADC_SetOffsetSaturation>
 8001a5e:	e17b      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fc28 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x15c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fc1d 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	f003 021f 	and.w	r2, r3, #31
 8001a8a:	e01e      	b.n	8001aca <HAL_ADC_ConfigChannel+0x19a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fc12 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001aae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001aba:	2320      	movs	r3, #32
 8001abc:	e004      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x1b2>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0e9b      	lsrs	r3, r3, #26
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	e018      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x1e4>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001b06:	2320      	movs	r3, #32
 8001b08:	e004      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d106      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fbe1 	bl	80012e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fbc5 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10a      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x222>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fbba 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	0e9b      	lsrs	r3, r3, #26
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	e01e      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x260>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2101      	movs	r1, #1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fbaf 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001b80:	2320      	movs	r3, #32
 8001b82:	e004      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x278>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0e9b      	lsrs	r3, r3, #26
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	e018      	b.n	8001bda <HAL_ADC_ConfigChannel+0x2aa>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	e004      	b.n	8001bda <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d106      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	2101      	movs	r1, #1
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fb7e 	bl	80012e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fb62 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x2e8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2102      	movs	r1, #2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fb57 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	0e9b      	lsrs	r3, r3, #26
 8001c12:	f003 021f 	and.w	r2, r3, #31
 8001c16:	e01e      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x326>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fb4c 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001c46:	2320      	movs	r3, #32
 8001c48:	e004      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x33e>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	0e9b      	lsrs	r3, r3, #26
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	e016      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x36c>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e004      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d106      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fb1d 	bl	80012e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fb01 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x3aa>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2103      	movs	r1, #3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff faf6 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	0e9b      	lsrs	r3, r3, #26
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	e017      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x3da>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2103      	movs	r1, #3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff faeb 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	e003      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x3f2>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	e011      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x416>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	e003      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d106      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2103      	movs	r1, #3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fac8 	bl	80012e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fbf1 	bl	8001544 <LL_ADC_IsEnabled>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f040 813d 	bne.w	8001fe4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6819      	ldr	r1, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f7ff fb72 	bl	8001460 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4aa2      	ldr	r2, [pc, #648]	; (800200c <HAL_ADC_ConfigChannel+0x6dc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	f040 812e 	bne.w	8001fe4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10b      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x480>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0e9b      	lsrs	r3, r3, #26
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	2b09      	cmp	r3, #9
 8001da6:	bf94      	ite	ls
 8001da8:	2301      	movls	r3, #1
 8001daa:	2300      	movhi	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e019      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x4b4>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e003      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	2b09      	cmp	r3, #9
 8001ddc:	bf94      	ite	ls
 8001dde:	2301      	movls	r3, #1
 8001de0:	2300      	movhi	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d079      	beq.n	8001edc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x4d4>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0e9b      	lsrs	r3, r3, #26
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	069b      	lsls	r3, r3, #26
 8001dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e02:	e015      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x500>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e14:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e003      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	069b      	lsls	r3, r3, #26
 8001e2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x520>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	3301      	adds	r3, #1
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	e017      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x550>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e003      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	ea42 0103 	orr.w	r1, r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x576>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	3301      	adds	r3, #1
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	051b      	lsls	r3, r3, #20
 8001ea4:	e018      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x5a8>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e003      	b.n	8001eca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	e07e      	b.n	8001fda <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x5c8>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0e9b      	lsrs	r3, r3, #26
 8001eee:	3301      	adds	r3, #1
 8001ef0:	069b      	lsls	r3, r3, #26
 8001ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef6:	e015      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x5f4>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	069b      	lsls	r3, r3, #26
 8001f20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x614>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	3301      	adds	r3, #1
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	e017      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x644>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	61fb      	str	r3, [r7, #28]
  return result;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	ea42 0103 	orr.w	r1, r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10d      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x670>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	3b1e      	subs	r3, #30
 8001f98:	051b      	lsls	r3, r3, #20
 8001f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	e01b      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x6a8>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	613b      	str	r3, [r7, #16]
  return result;
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	e003      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	f003 021f 	and.w	r2, r3, #31
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b1e      	subs	r3, #30
 8001fd2:	051b      	lsls	r3, r3, #20
 8001fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fd8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7ff fa12 	bl	8001408 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_ADC_ConfigChannel+0x6e0>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80be 	beq.w	800216e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffa:	d004      	beq.n	8002006 <HAL_ADC_ConfigChannel+0x6d6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_ADC_ConfigChannel+0x6e4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10a      	bne.n	800201c <HAL_ADC_ConfigChannel+0x6ec>
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <HAL_ADC_ConfigChannel+0x6e8>)
 8002008:	e009      	b.n	800201e <HAL_ADC_ConfigChannel+0x6ee>
 800200a:	bf00      	nop
 800200c:	407f0000 	.word	0x407f0000
 8002010:	80080000 	.word	0x80080000
 8002014:	50000100 	.word	0x50000100
 8002018:	50000300 	.word	0x50000300
 800201c:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_ADC_ConfigChannel+0x854>)
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f91a 	bl	8001258 <LL_ADC_GetCommonPathInternalCh>
 8002024:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a56      	ldr	r2, [pc, #344]	; (8002188 <HAL_ADC_ConfigChannel+0x858>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_ADC_ConfigChannel+0x70c>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a55      	ldr	r2, [pc, #340]	; (800218c <HAL_ADC_ConfigChannel+0x85c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d13a      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800203c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d134      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002050:	d005      	beq.n	800205e <HAL_ADC_ConfigChannel+0x72e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a4e      	ldr	r2, [pc, #312]	; (8002190 <HAL_ADC_ConfigChannel+0x860>)
 8002058:	4293      	cmp	r3, r2
 800205a:	f040 8085 	bne.w	8002168 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002066:	d004      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x742>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_ADC_ConfigChannel+0x864>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x746>
 8002072:	4a49      	ldr	r2, [pc, #292]	; (8002198 <HAL_ADC_ConfigChannel+0x868>)
 8002074:	e000      	b.n	8002078 <HAL_ADC_ConfigChannel+0x748>
 8002076:	4a43      	ldr	r2, [pc, #268]	; (8002184 <HAL_ADC_ConfigChannel+0x854>)
 8002078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800207c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7ff f8d5 	bl	8001232 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002088:	4b44      	ldr	r3, [pc, #272]	; (800219c <HAL_ADC_ConfigChannel+0x86c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	4a44      	ldr	r2, [pc, #272]	; (80021a0 <HAL_ADC_ConfigChannel+0x870>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020a2:	e002      	b.n	80020aa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f9      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020b0:	e05a      	b.n	8002168 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a3b      	ldr	r2, [pc, #236]	; (80021a4 <HAL_ADC_ConfigChannel+0x874>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d125      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d11f      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a31      	ldr	r2, [pc, #196]	; (8002194 <HAL_ADC_ConfigChannel+0x864>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d104      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x7ac>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a34      	ldr	r2, [pc, #208]	; (80021a8 <HAL_ADC_ConfigChannel+0x878>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d047      	beq.n	800216c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e4:	d004      	beq.n	80020f0 <HAL_ADC_ConfigChannel+0x7c0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <HAL_ADC_ConfigChannel+0x864>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x7c4>
 80020f0:	4a29      	ldr	r2, [pc, #164]	; (8002198 <HAL_ADC_ConfigChannel+0x868>)
 80020f2:	e000      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x7c6>
 80020f4:	4a23      	ldr	r2, [pc, #140]	; (8002184 <HAL_ADC_ConfigChannel+0x854>)
 80020f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fe:	4619      	mov	r1, r3
 8002100:	4610      	mov	r0, r2
 8002102:	f7ff f896 	bl	8001232 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002106:	e031      	b.n	800216c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_ADC_ConfigChannel+0x87c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d12d      	bne.n	800216e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d127      	bne.n	800216e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_ADC_ConfigChannel+0x864>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002130:	d004      	beq.n	800213c <HAL_ADC_ConfigChannel+0x80c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a17      	ldr	r2, [pc, #92]	; (8002194 <HAL_ADC_ConfigChannel+0x864>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x810>
 800213c:	4a16      	ldr	r2, [pc, #88]	; (8002198 <HAL_ADC_ConfigChannel+0x868>)
 800213e:	e000      	b.n	8002142 <HAL_ADC_ConfigChannel+0x812>
 8002140:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_ADC_ConfigChannel+0x854>)
 8002142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002146:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800214a:	4619      	mov	r1, r3
 800214c:	4610      	mov	r0, r2
 800214e:	f7ff f870 	bl	8001232 <LL_ADC_SetCommonPathInternalCh>
 8002152:	e00c      	b.n	800216e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	f043 0220 	orr.w	r2, r3, #32
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002166:	e002      	b.n	800216e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002168:	bf00      	nop
 800216a:	e000      	b.n	800216e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800216c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002176:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800217a:	4618      	mov	r0, r3
 800217c:	37d8      	adds	r7, #216	; 0xd8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	50000700 	.word	0x50000700
 8002188:	c3210000 	.word	0xc3210000
 800218c:	90c00010 	.word	0x90c00010
 8002190:	50000600 	.word	0x50000600
 8002194:	50000100 	.word	0x50000100
 8002198:	50000300 	.word	0x50000300
 800219c:	20000000 	.word	0x20000000
 80021a0:	053e2d63 	.word	0x053e2d63
 80021a4:	c7520000 	.word	0xc7520000
 80021a8:	50000500 	.word	0x50000500
 80021ac:	cb840000 	.word	0xcb840000

080021b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	db0a      	blt.n	800223e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <__NVIC_SetPriority+0x4c>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	0112      	lsls	r2, r2, #4
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	440b      	add	r3, r1
 8002238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800223c:	e00a      	b.n	8002254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4908      	ldr	r1, [pc, #32]	; (8002264 <__NVIC_SetPriority+0x50>)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3b04      	subs	r3, #4
 800224c:	0112      	lsls	r2, r2, #4
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	440b      	add	r3, r1
 8002252:	761a      	strb	r2, [r3, #24]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f1c3 0307 	rsb	r3, r3, #7
 8002282:	2b04      	cmp	r3, #4
 8002284:	bf28      	it	cs
 8002286:	2304      	movcs	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3304      	adds	r3, #4
 800228e:	2b06      	cmp	r3, #6
 8002290:	d902      	bls.n	8002298 <NVIC_EncodePriority+0x30>
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3b03      	subs	r3, #3
 8002296:	e000      	b.n	800229a <NVIC_EncodePriority+0x32>
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	4313      	orrs	r3, r2
         );
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e0:	d301      	bcc.n	80022e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <SysTick_Config+0x40>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f7ff ff8e 	bl	8002214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <SysTick_Config+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <SysTick_Config+0x40>)
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000e010 	.word	0xe000e010

08002314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff47 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff5e 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff90 	bl	8002268 <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff5f 	bl	8002214 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffb2 	bl	80022d0 <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e147      	b.n	800261a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fc68 	bl	8000c74 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0210 	bic.w	r2, r2, #16
 80023b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b4:	f7fe fefc 	bl	80011b0 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023ba:	e012      	b.n	80023e2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80023bc:	f7fe fef8 	bl	80011b0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b0a      	cmp	r3, #10
 80023c8:	d90b      	bls.n	80023e2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2203      	movs	r2, #3
 80023da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e11b      	b.n	800261a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d0e5      	beq.n	80023bc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002400:	f7fe fed6 	bl	80011b0 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002406:	e012      	b.n	800242e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002408:	f7fe fed2 	bl	80011b0 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b0a      	cmp	r3, #10
 8002414:	d90b      	bls.n	800242e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2203      	movs	r2, #3
 8002426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0f5      	b.n	800261a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0e5      	beq.n	8002408 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0202 	orr.w	r2, r2, #2
 800244a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a74      	ldr	r2, [pc, #464]	; (8002624 <HAL_FDCAN_Init+0x2ac>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d103      	bne.n	800245e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002456:	4a74      	ldr	r2, [pc, #464]	; (8002628 <HAL_FDCAN_Init+0x2b0>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7c1b      	ldrb	r3, [r3, #16]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d108      	bne.n	8002478 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002474:	619a      	str	r2, [r3, #24]
 8002476:	e007      	b.n	8002488 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002486:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7c5b      	ldrb	r3, [r3, #17]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d108      	bne.n	80024a2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800249e:	619a      	str	r2, [r3, #24]
 80024a0:	e007      	b.n	80024b2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7c9b      	ldrb	r3, [r3, #18]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024c8:	619a      	str	r2, [r3, #24]
 80024ca:	e007      	b.n	80024dc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024da:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002500:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0210 	bic.w	r2, r2, #16
 8002510:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0204 	orr.w	r2, r2, #4
 8002528:	619a      	str	r2, [r3, #24]
 800252a:	e02c      	b.n	8002586 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d028      	beq.n	8002586 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d01c      	beq.n	8002576 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800254a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0210 	orr.w	r2, r2, #16
 800255a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d110      	bne.n	8002586 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	619a      	str	r2, [r3, #24]
 8002574:	e007      	b.n	8002586 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699a      	ldr	r2, [r3, #24]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0220 	orr.w	r2, r2, #32
 8002584:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	3b01      	subs	r3, #1
 800258c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	3b01      	subs	r3, #1
 8002594:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002596:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800259e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80025ae:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025b0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025ba:	d115      	bne.n	80025e8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	3b01      	subs	r3, #1
 80025c8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025ca:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	3b01      	subs	r3, #1
 80025d2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80025d4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	3b01      	subs	r3, #1
 80025de:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80025e4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025e6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f814 	bl	800262c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40006400 	.word	0x40006400
 8002628:	40006500 	.word	0x40006500

0800262c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002634:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002636:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2f      	ldr	r2, [pc, #188]	; (80026fc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d103      	bne.n	800264a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002648:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2c      	ldr	r2, [pc, #176]	; (8002700 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d103      	bne.n	800265c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800265a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800266a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	041a      	lsls	r2, r3, #16
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002690:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	061a      	lsls	r2, r3, #24
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e005      	b.n	80026de <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3304      	adds	r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3f3      	bcc.n	80026d2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	4000a400 	.word	0x4000a400
 80026fc:	40006800 	.word	0x40006800
 8002700:	40006c00 	.word	0x40006c00

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002712:	e15a      	b.n	80029ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	2101      	movs	r1, #1
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 814c 	beq.w	80029c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d005      	beq.n	8002744 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002740:	2b02      	cmp	r3, #2
 8002742:	d130      	bne.n	80027a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800277a:	2201      	movs	r2, #1
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	f003 0201 	and.w	r2, r3, #1
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d017      	beq.n	80027e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d123      	bne.n	8002836 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	08da      	lsrs	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3208      	adds	r2, #8
 80027f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	08da      	lsrs	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3208      	adds	r2, #8
 8002830:	6939      	ldr	r1, [r7, #16]
 8002832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80a6 	beq.w	80029c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002878:	4b5b      	ldr	r3, [pc, #364]	; (80029e8 <HAL_GPIO_Init+0x2e4>)
 800287a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287c:	4a5a      	ldr	r2, [pc, #360]	; (80029e8 <HAL_GPIO_Init+0x2e4>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6613      	str	r3, [r2, #96]	; 0x60
 8002884:	4b58      	ldr	r3, [pc, #352]	; (80029e8 <HAL_GPIO_Init+0x2e4>)
 8002886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002890:	4a56      	ldr	r2, [pc, #344]	; (80029ec <HAL_GPIO_Init+0x2e8>)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028ba:	d01f      	beq.n	80028fc <HAL_GPIO_Init+0x1f8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a4c      	ldr	r2, [pc, #304]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d019      	beq.n	80028f8 <HAL_GPIO_Init+0x1f4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a4b      	ldr	r2, [pc, #300]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d013      	beq.n	80028f4 <HAL_GPIO_Init+0x1f0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a4a      	ldr	r2, [pc, #296]	; (80029f8 <HAL_GPIO_Init+0x2f4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00d      	beq.n	80028f0 <HAL_GPIO_Init+0x1ec>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a49      	ldr	r2, [pc, #292]	; (80029fc <HAL_GPIO_Init+0x2f8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <HAL_GPIO_Init+0x1e8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a48      	ldr	r2, [pc, #288]	; (8002a00 <HAL_GPIO_Init+0x2fc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_GPIO_Init+0x1e4>
 80028e4:	2305      	movs	r3, #5
 80028e6:	e00a      	b.n	80028fe <HAL_GPIO_Init+0x1fa>
 80028e8:	2306      	movs	r3, #6
 80028ea:	e008      	b.n	80028fe <HAL_GPIO_Init+0x1fa>
 80028ec:	2304      	movs	r3, #4
 80028ee:	e006      	b.n	80028fe <HAL_GPIO_Init+0x1fa>
 80028f0:	2303      	movs	r3, #3
 80028f2:	e004      	b.n	80028fe <HAL_GPIO_Init+0x1fa>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e002      	b.n	80028fe <HAL_GPIO_Init+0x1fa>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_GPIO_Init+0x1fa>
 80028fc:	2300      	movs	r3, #0
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	f002 0203 	and.w	r2, r2, #3
 8002904:	0092      	lsls	r2, r2, #2
 8002906:	4093      	lsls	r3, r2
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800290e:	4937      	ldr	r1, [pc, #220]	; (80029ec <HAL_GPIO_Init+0x2e8>)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800291c:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_GPIO_Init+0x300>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002940:	4a30      	ldr	r2, [pc, #192]	; (8002a04 <HAL_GPIO_Init+0x300>)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_GPIO_Init+0x300>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800296a:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <HAL_GPIO_Init+0x300>)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_GPIO_Init+0x300>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_GPIO_Init+0x300>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <HAL_GPIO_Init+0x300>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029be:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <HAL_GPIO_Init+0x300>)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f47f ae9d 	bne.w	8002714 <HAL_GPIO_Init+0x10>
  }
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40010000 	.word	0x40010000
 80029f0:	48000400 	.word	0x48000400
 80029f4:	48000800 	.word	0x48000800
 80029f8:	48000c00 	.word	0x48000c00
 80029fc:	48001000 	.word	0x48001000
 8002a00:	48001400 	.word	0x48001400
 8002a04:	40010400 	.word	0x40010400

08002a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
 8002a14:	4613      	mov	r3, r2
 8002a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a18:	787b      	ldrb	r3, [r7, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0c0      	b.n	8002bcc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe faa8 	bl	8000fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2203      	movs	r2, #3
 8002a68:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 f817 	bl	8005aa4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	e03e      	b.n	8002afa <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3311      	adds	r3, #17
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3313      	adds	r3, #19
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3320      	adds	r3, #32
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	3324      	adds	r3, #36	; 0x24
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	3301      	adds	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	791b      	ldrb	r3, [r3, #4]
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d3bb      	bcc.n	8002a7c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e044      	b.n	8002b94 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	3301      	adds	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	791b      	ldrb	r3, [r3, #4]
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d3b5      	bcc.n	8002b0a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002baa:	f002 ff96 	bl	8005ada <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7a9b      	ldrb	r3, [r3, #10]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d102      	bne.n	8002bca <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f805 	bl	8002bd4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f043 0302 	orr.w	r3, r3, #2
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d141      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c36:	4b4b      	ldr	r3, [pc, #300]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c42:	d131      	bne.n	8002ca8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c44:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4a:	4a46      	ldr	r2, [pc, #280]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c54:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c5c:	4a41      	ldr	r2, [pc, #260]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c64:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2232      	movs	r2, #50	; 0x32
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	4a3f      	ldr	r2, [pc, #252]	; (8002d6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	0c9b      	lsrs	r3, r3, #18
 8002c76:	3301      	adds	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7a:	e002      	b.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c82:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d102      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f2      	bne.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c96:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	d158      	bne.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e057      	b.n	8002d58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ca8:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cae:	4a2d      	ldr	r2, [pc, #180]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cb8:	e04d      	b.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc0:	d141      	bne.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc2:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cce:	d131      	bne.n	8002d34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd6:	4a23      	ldr	r2, [pc, #140]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ce8:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2232      	movs	r2, #50	; 0x32
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	0c9b      	lsrs	r3, r3, #18
 8002d02:	3301      	adds	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d06:	e002      	b.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1a:	d102      	bne.n	8002d22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f2      	bne.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d112      	bne.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e011      	b.n	8002d58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d44:	e007      	b.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40007000 	.word	0x40007000
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	431bde83 	.word	0x431bde83

08002d70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7e:	6093      	str	r3, [r2, #8]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40007000 	.word	0x40007000

08002d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e2fe      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d075      	beq.n	8002e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dae:	4b97      	ldr	r3, [pc, #604]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db8:	4b94      	ldr	r3, [pc, #592]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	d102      	bne.n	8002dce <HAL_RCC_OscConfig+0x3e>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d002      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x44>
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	4b8d      	ldr	r3, [pc, #564]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d05b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x108>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d157      	bne.n	8002e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e2d9      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d106      	bne.n	8002e04 <HAL_RCC_OscConfig+0x74>
 8002df6:	4b85      	ldr	r3, [pc, #532]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a84      	ldr	r2, [pc, #528]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e01d      	b.n	8002e40 <HAL_RCC_OscConfig+0xb0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x98>
 8002e0e:	4b7f      	ldr	r3, [pc, #508]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a7e      	ldr	r2, [pc, #504]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b7c      	ldr	r3, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7b      	ldr	r2, [pc, #492]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e00b      	b.n	8002e40 <HAL_RCC_OscConfig+0xb0>
 8002e28:	4b78      	ldr	r3, [pc, #480]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a77      	ldr	r2, [pc, #476]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	4b75      	ldr	r3, [pc, #468]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a74      	ldr	r2, [pc, #464]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe f9b2 	bl	80011b0 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe f9ae 	bl	80011b0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e29e      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e62:	4b6a      	ldr	r3, [pc, #424]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0xc0>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe f99e 	bl	80011b0 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe f99a 	bl	80011b0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e28a      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e8a:	4b60      	ldr	r3, [pc, #384]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0xe8>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d075      	beq.n	8002f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea6:	4b59      	ldr	r3, [pc, #356]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb0:	4b56      	ldr	r3, [pc, #344]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d102      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x136>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d002      	beq.n	8002ecc <HAL_RCC_OscConfig+0x13c>
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11f      	bne.n	8002f0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ecc:	4b4f      	ldr	r3, [pc, #316]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x154>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e25d      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee4:	4b49      	ldr	r3, [pc, #292]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	4946      	ldr	r1, [pc, #280]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ef8:	4b45      	ldr	r3, [pc, #276]	; (8003010 <HAL_RCC_OscConfig+0x280>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe f90b 	bl	8001118 <HAL_InitTick>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d043      	beq.n	8002f90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e249      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d023      	beq.n	8002f5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f14:	4b3d      	ldr	r3, [pc, #244]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a3c      	ldr	r2, [pc, #240]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe f946 	bl	80011b0 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe f942 	bl	80011b0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e232      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f3a:	4b34      	ldr	r3, [pc, #208]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b31      	ldr	r3, [pc, #196]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	061b      	lsls	r3, r3, #24
 8002f54:	492d      	ldr	r1, [pc, #180]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
 8002f5a:	e01a      	b.n	8002f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5c:	4b2b      	ldr	r3, [pc, #172]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2a      	ldr	r2, [pc, #168]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe f922 	bl	80011b0 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f70:	f7fe f91e 	bl	80011b0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e20e      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f82:	4b22      	ldr	r3, [pc, #136]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x1e0>
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d041      	beq.n	8003022 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d01c      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f7fe f8fb 	bl	80011b0 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7fe f8f7 	bl	80011b0 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e1e7      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0ef      	beq.n	8002fbe <HAL_RCC_OscConfig+0x22e>
 8002fde:	e020      	b.n	8003022 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe f8de 	bl	80011b0 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ff6:	e00d      	b.n	8003014 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe f8da 	bl	80011b0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d906      	bls.n	8003014 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e1ca      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003014:	4b8c      	ldr	r3, [pc, #560]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ea      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80a6 	beq.w	800317c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003034:	4b84      	ldr	r3, [pc, #528]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_OscConfig+0x2b4>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x2b6>
 8003044:	2300      	movs	r3, #0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b7f      	ldr	r3, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	4a7e      	ldr	r2, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
 8003056:	4b7c      	ldr	r3, [pc, #496]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003062:	2301      	movs	r3, #1
 8003064:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003066:	4b79      	ldr	r3, [pc, #484]	; (800324c <HAL_RCC_OscConfig+0x4bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x4bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x4bc>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe f897 	bl	80011b0 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fe f893 	bl	80011b0 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e183      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003098:	4b6c      	ldr	r3, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x4bc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d108      	bne.n	80030be <HAL_RCC_OscConfig+0x32e>
 80030ac:	4b66      	ldr	r3, [pc, #408]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	4a65      	ldr	r2, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030bc:	e024      	b.n	8003108 <HAL_RCC_OscConfig+0x378>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	d110      	bne.n	80030e8 <HAL_RCC_OscConfig+0x358>
 80030c6:	4b60      	ldr	r3, [pc, #384]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	4a5e      	ldr	r2, [pc, #376]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d6:	4b5c      	ldr	r3, [pc, #368]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	4a5a      	ldr	r2, [pc, #360]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e6:	e00f      	b.n	8003108 <HAL_RCC_OscConfig+0x378>
 80030e8:	4b57      	ldr	r3, [pc, #348]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	4a56      	ldr	r2, [pc, #344]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d016      	beq.n	800313e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fe f84e 	bl	80011b0 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fe f84a 	bl	80011b0 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e138      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312e:	4b46      	ldr	r3, [pc, #280]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ed      	beq.n	8003118 <HAL_RCC_OscConfig+0x388>
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fe f837 	bl	80011b0 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fe f833 	bl	80011b0 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e121      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800315c:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ed      	bne.n	8003146 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800316a:	7ffb      	ldrb	r3, [r7, #31]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003170:	4b35      	ldr	r3, [pc, #212]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	4a34      	ldr	r2, [pc, #208]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d03c      	beq.n	8003202 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01c      	beq.n	80031ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003196:	4a2c      	ldr	r2, [pc, #176]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fe f806 	bl	80011b0 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031a8:	f7fe f802 	bl	80011b0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0f2      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80031bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ef      	beq.n	80031a8 <HAL_RCC_OscConfig+0x418>
 80031c8:	e01b      	b.n	8003202 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031ca:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80031cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d0:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fd ffe9 	bl	80011b0 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e2:	f7fd ffe5 	bl	80011b0 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0d5      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031f4:	4b14      	ldr	r3, [pc, #80]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 80031f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ef      	bne.n	80031e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80c9 	beq.w	800339e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b0c      	cmp	r3, #12
 8003216:	f000 8083 	beq.w	8003320 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d15e      	bne.n	80032e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a08      	ldr	r2, [pc, #32]	; (8003248 <HAL_RCC_OscConfig+0x4b8>)
 8003228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800322c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fd ffbf 	bl	80011b0 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003234:	e00c      	b.n	8003250 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003236:	f7fd ffbb 	bl	80011b0 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d905      	bls.n	8003250 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0ab      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003250:	4b55      	ldr	r3, [pc, #340]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1ec      	bne.n	8003236 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800325c:	4b52      	ldr	r3, [pc, #328]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	4b52      	ldr	r3, [pc, #328]	; (80033ac <HAL_RCC_OscConfig+0x61c>)
 8003262:	4013      	ands	r3, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6a11      	ldr	r1, [r2, #32]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800326c:	3a01      	subs	r2, #1
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	4311      	orrs	r1, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003276:	0212      	lsls	r2, r2, #8
 8003278:	4311      	orrs	r1, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800327e:	0852      	lsrs	r2, r2, #1
 8003280:	3a01      	subs	r2, #1
 8003282:	0552      	lsls	r2, r2, #21
 8003284:	4311      	orrs	r1, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800328a:	0852      	lsrs	r2, r2, #1
 800328c:	3a01      	subs	r2, #1
 800328e:	0652      	lsls	r2, r2, #25
 8003290:	4311      	orrs	r1, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003296:	06d2      	lsls	r2, r2, #27
 8003298:	430a      	orrs	r2, r1
 800329a:	4943      	ldr	r1, [pc, #268]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 800329c:	4313      	orrs	r3, r2
 800329e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a0:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a40      	ldr	r2, [pc, #256]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032ac:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a3d      	ldr	r2, [pc, #244]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fd ff7a 	bl	80011b0 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fd ff76 	bl	80011b0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e066      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d2:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x530>
 80032de:	e05e      	b.n	800339e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e0:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd ff60 	bl	80011b0 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fd ff5c 	bl	80011b0 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e04c      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003306:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	4924      	ldr	r1, [pc, #144]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_OscConfig+0x620>)
 800331a:	4013      	ands	r3, r2
 800331c:	60cb      	str	r3, [r1, #12]
 800331e:	e03e      	b.n	800339e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e039      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800332c:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0203 	and.w	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	429a      	cmp	r2, r3
 800333e:	d12c      	bne.n	800339a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	3b01      	subs	r3, #1
 800334c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d123      	bne.n	800339a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d11b      	bne.n	800339a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d113      	bne.n	800339a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	3b01      	subs	r3, #1
 8003380:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d109      	bne.n	800339a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	085b      	lsrs	r3, r3, #1
 8003392:	3b01      	subs	r3, #1
 8003394:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	019f800c 	.word	0x019f800c
 80033b0:	feeefffc 	.word	0xfeeefffc

080033b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e11e      	b.n	800360a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033cc:	4b91      	ldr	r3, [pc, #580]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d910      	bls.n	80033fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b8e      	ldr	r3, [pc, #568]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 020f 	bic.w	r2, r3, #15
 80033e2:	498c      	ldr	r1, [pc, #560]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b8a      	ldr	r3, [pc, #552]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e106      	b.n	800360a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d073      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d129      	bne.n	8003464 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003410:	4b81      	ldr	r3, [pc, #516]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0f4      	b.n	800360a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003420:	f000 f99e 	bl	8003760 <RCC_GetSysClockFreqFromPLLSource>
 8003424:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4a7c      	ldr	r2, [pc, #496]	; (800361c <HAL_RCC_ClockConfig+0x268>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d93f      	bls.n	80034ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800342e:	4b7a      	ldr	r3, [pc, #488]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003442:	2b00      	cmp	r3, #0
 8003444:	d033      	beq.n	80034ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800344a:	2b00      	cmp	r3, #0
 800344c:	d12f      	bne.n	80034ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800344e:	4b72      	ldr	r3, [pc, #456]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003456:	4a70      	ldr	r2, [pc, #448]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 8003458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e024      	b.n	80034ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d107      	bne.n	800347c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800346c:	4b6a      	ldr	r3, [pc, #424]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0c6      	b.n	800360a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347c:	4b66      	ldr	r3, [pc, #408]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0be      	b.n	800360a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800348c:	f000 f8ce 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8003490:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4a61      	ldr	r2, [pc, #388]	; (800361c <HAL_RCC_ClockConfig+0x268>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d909      	bls.n	80034ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800349a:	4b5f      	ldr	r3, [pc, #380]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a2:	4a5d      	ldr	r2, [pc, #372]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 80034a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ae:	4b5a      	ldr	r3, [pc, #360]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4957      	ldr	r1, [pc, #348]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fd fe76 	bl	80011b0 <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fd fe72 	bl	80011b0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e095      	b.n	800360a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4b4e      	ldr	r3, [pc, #312]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 020c 	and.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1eb      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d023      	beq.n	8003544 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003508:	4b43      	ldr	r3, [pc, #268]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a42      	ldr	r2, [pc, #264]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 800350e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003512:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003520:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003528:	4a3b      	ldr	r2, [pc, #236]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 800352a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800352e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b39      	ldr	r3, [pc, #228]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4936      	ldr	r1, [pc, #216]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
 8003542:	e008      	b.n	8003556 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b80      	cmp	r3, #128	; 0x80
 8003548:	d105      	bne.n	8003556 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800354a:	4b33      	ldr	r3, [pc, #204]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	4a32      	ldr	r2, [pc, #200]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 8003550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003554:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003556:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d21d      	bcs.n	80035a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 020f 	bic.w	r2, r3, #15
 800356c:	4929      	ldr	r1, [pc, #164]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003574:	f7fd fe1c 	bl	80011b0 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fd fe18 	bl	80011b0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e03b      	b.n	800360a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d1ed      	bne.n	800357c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4917      	ldr	r1, [pc, #92]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	490f      	ldr	r1, [pc, #60]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035de:	f000 f825 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	490c      	ldr	r1, [pc, #48]	; (8003620 <HAL_RCC_ClockConfig+0x26c>)
 80035f0:	5ccb      	ldrb	r3, [r1, r3]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_RCC_ClockConfig+0x270>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <HAL_RCC_ClockConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fd88 	bl	8001118 <HAL_InitTick>
 8003608:	4603      	mov	r3, r0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40022000 	.word	0x40022000
 8003618:	40021000 	.word	0x40021000
 800361c:	04c4b400 	.word	0x04c4b400
 8003620:	08005b88 	.word	0x08005b88
 8003624:	20000000 	.word	0x20000000
 8003628:	20000004 	.word	0x20000004

0800362c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003632:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b04      	cmp	r3, #4
 800363c:	d102      	bne.n	8003644 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800363e:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	e047      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d102      	bne.n	8003656 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003650:	4b26      	ldr	r3, [pc, #152]	; (80036ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	e03e      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003656:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d136      	bne.n	80036d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003662:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3301      	adds	r3, #1
 8003678:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d10c      	bne.n	800369a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003680:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	4a16      	ldr	r2, [pc, #88]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800368a:	68d2      	ldr	r2, [r2, #12]
 800368c:	0a12      	lsrs	r2, r2, #8
 800368e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	617b      	str	r3, [r7, #20]
      break;
 8003698:	e00c      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800369a:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a4:	68d2      	ldr	r2, [r2, #12]
 80036a6:	0a12      	lsrs	r2, r2, #8
 80036a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ac:	fb02 f303 	mul.w	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]
      break;
 80036b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	0e5b      	lsrs	r3, r3, #25
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	3301      	adds	r3, #1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	e001      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036d4:	693b      	ldr	r3, [r7, #16]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	007a1200 	.word	0x007a1200

080036f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000000 	.word	0x20000000

08003708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800370c:	f7ff fff0 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	08005b98 	.word	0x08005b98

08003734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003738:	f7ff ffda 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	0adb      	lsrs	r3, r3, #11
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4904      	ldr	r1, [pc, #16]	; (800375c <HAL_RCC_GetPCLK2Freq+0x28>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	08005b98 	.word	0x08005b98

08003760 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003766:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	3301      	adds	r3, #1
 800377c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d10c      	bne.n	800379e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003784:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800378e:	68d2      	ldr	r2, [r2, #12]
 8003790:	0a12      	lsrs	r2, r2, #8
 8003792:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	617b      	str	r3, [r7, #20]
    break;
 800379c:	e00c      	b.n	80037b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800379e:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037a8:	68d2      	ldr	r2, [r2, #12]
 80037aa:	0a12      	lsrs	r2, r2, #8
 80037ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]
    break;
 80037b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0e5b      	lsrs	r3, r3, #25
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037d2:	687b      	ldr	r3, [r7, #4]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40021000 	.word	0x40021000
 80037e4:	007a1200 	.word	0x007a1200
 80037e8:	00f42400 	.word	0x00f42400

080037ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037f4:	2300      	movs	r3, #0
 80037f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037f8:	2300      	movs	r3, #0
 80037fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8098 	beq.w	800393a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380e:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10d      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381a:	4b40      	ldr	r3, [pc, #256]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381e:	4a3f      	ldr	r2, [pc, #252]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003824:	6593      	str	r3, [r2, #88]	; 0x58
 8003826:	4b3d      	ldr	r3, [pc, #244]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003832:	2301      	movs	r3, #1
 8003834:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003836:	4b3a      	ldr	r3, [pc, #232]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a39      	ldr	r2, [pc, #228]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800383c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003840:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003842:	f7fd fcb5 	bl	80011b0 <HAL_GetTick>
 8003846:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003848:	e009      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384a:	f7fd fcb1 	bl	80011b0 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d902      	bls.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	74fb      	strb	r3, [r7, #19]
        break;
 800385c:	e005      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800385e:	4b30      	ldr	r3, [pc, #192]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ef      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d159      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003870:	4b2a      	ldr	r3, [pc, #168]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01e      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	429a      	cmp	r2, r3
 800388a:	d019      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800388c:	4b23      	ldr	r3, [pc, #140]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003898:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a8:	4b1c      	ldr	r3, [pc, #112]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	4a1b      	ldr	r2, [pc, #108]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fd fc71 	bl	80011b0 <HAL_GetTick>
 80038ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d0:	e00b      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fd fc6d 	bl	80011b0 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d902      	bls.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	74fb      	strb	r3, [r7, #19]
            break;
 80038e8:	e006      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ec      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003914:	e008      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003916:	7cfb      	ldrb	r3, [r7, #19]
 8003918:	74bb      	strb	r3, [r7, #18]
 800391a:	e005      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800391c:	40021000 	.word	0x40021000
 8003920:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003928:	7c7b      	ldrb	r3, [r7, #17]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392e:	4ba7      	ldr	r3, [pc, #668]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	4aa6      	ldr	r2, [pc, #664]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003938:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003946:	4ba1      	ldr	r3, [pc, #644]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f023 0203 	bic.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	499d      	ldr	r1, [pc, #628]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003968:	4b98      	ldr	r3, [pc, #608]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f023 020c 	bic.w	r2, r3, #12
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4995      	ldr	r1, [pc, #596]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800398a:	4b90      	ldr	r3, [pc, #576]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	498c      	ldr	r1, [pc, #560]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039ac:	4b87      	ldr	r3, [pc, #540]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	4984      	ldr	r1, [pc, #528]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ce:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	497b      	ldr	r1, [pc, #492]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039f0:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	4973      	ldr	r1, [pc, #460]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a12:	4b6e      	ldr	r3, [pc, #440]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	496a      	ldr	r1, [pc, #424]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a34:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4962      	ldr	r1, [pc, #392]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a56:	4b5d      	ldr	r3, [pc, #372]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	4959      	ldr	r1, [pc, #356]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a78:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a7e:	f023 0203 	bic.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	4951      	ldr	r1, [pc, #324]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a9a:	4b4c      	ldr	r3, [pc, #304]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	4948      	ldr	r1, [pc, #288]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4940      	ldr	r1, [pc, #256]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ada:	d105      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003adc:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a3a      	ldr	r2, [pc, #232]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d015      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003af4:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b02:	4932      	ldr	r1, [pc, #200]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a2c      	ldr	r2, [pc, #176]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b1e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d015      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b2c:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	4924      	ldr	r1, [pc, #144]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b4c:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b72:	4916      	ldr	r1, [pc, #88]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b82:	d105      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d019      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	4908      	ldr	r1, [pc, #32]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bba:	d109      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a02      	ldr	r2, [pc, #8]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc6:	60d3      	str	r3, [r2, #12]
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d015      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bdc:	4b29      	ldr	r3, [pc, #164]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	4926      	ldr	r1, [pc, #152]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bfc:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c06:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d015      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003c14:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	4918      	ldr	r1, [pc, #96]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c32:	d105      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d015      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5a:	490a      	ldr	r1, [pc, #40]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c78:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000

08003c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e049      	b.n	8003d2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fd f8b2 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 fac0 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e049      	b.n	8003ddc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d106      	bne.n	8003d62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f841 	bl	8003de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f000 fa69 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e0ff      	b.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b14      	cmp	r3, #20
 8003e22:	f200 80f0 	bhi.w	8004006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e81 	.word	0x08003e81
 8003e30:	08004007 	.word	0x08004007
 8003e34:	08004007 	.word	0x08004007
 8003e38:	08004007 	.word	0x08004007
 8003e3c:	08003ec1 	.word	0x08003ec1
 8003e40:	08004007 	.word	0x08004007
 8003e44:	08004007 	.word	0x08004007
 8003e48:	08004007 	.word	0x08004007
 8003e4c:	08003f03 	.word	0x08003f03
 8003e50:	08004007 	.word	0x08004007
 8003e54:	08004007 	.word	0x08004007
 8003e58:	08004007 	.word	0x08004007
 8003e5c:	08003f43 	.word	0x08003f43
 8003e60:	08004007 	.word	0x08004007
 8003e64:	08004007 	.word	0x08004007
 8003e68:	08004007 	.word	0x08004007
 8003e6c:	08003f85 	.word	0x08003f85
 8003e70:	08004007 	.word	0x08004007
 8003e74:	08004007 	.word	0x08004007
 8003e78:	08004007 	.word	0x08004007
 8003e7c:	08003fc5 	.word	0x08003fc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fa94 	bl	80043b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0208 	orr.w	r2, r2, #8
 8003e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6999      	ldr	r1, [r3, #24]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	619a      	str	r2, [r3, #24]
      break;
 8003ebe:	e0a5      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fb0e 	bl	80044e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	619a      	str	r2, [r3, #24]
      break;
 8003f00:	e084      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fb81 	bl	8004610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0208 	orr.w	r2, r2, #8
 8003f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0204 	bic.w	r2, r2, #4
 8003f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69d9      	ldr	r1, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	61da      	str	r2, [r3, #28]
      break;
 8003f40:	e064      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fbf3 	bl	8004734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69d9      	ldr	r1, [r3, #28]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	021a      	lsls	r2, r3, #8
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	61da      	str	r2, [r3, #28]
      break;
 8003f82:	e043      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fc66 	bl	800485c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0208 	orr.w	r2, r2, #8
 8003f9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0204 	bic.w	r2, r2, #4
 8003fae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003fc2:	e023      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fcb0 	bl	8004930 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	021a      	lsls	r2, r3, #8
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004004:	e002      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	75fb      	strb	r3, [r7, #23]
      break;
 800400a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004014:	7dfb      	ldrb	r3, [r7, #23]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop

08004020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_TIM_ConfigClockSource+0x1c>
 8004038:	2302      	movs	r3, #2
 800403a:	e0f6      	b.n	800422a <HAL_TIM_ConfigClockSource+0x20a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800405a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800405e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a6f      	ldr	r2, [pc, #444]	; (8004234 <HAL_TIM_ConfigClockSource+0x214>)
 8004076:	4293      	cmp	r3, r2
 8004078:	f000 80c1 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 800407c:	4a6d      	ldr	r2, [pc, #436]	; (8004234 <HAL_TIM_ConfigClockSource+0x214>)
 800407e:	4293      	cmp	r3, r2
 8004080:	f200 80c6 	bhi.w	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 8004084:	4a6c      	ldr	r2, [pc, #432]	; (8004238 <HAL_TIM_ConfigClockSource+0x218>)
 8004086:	4293      	cmp	r3, r2
 8004088:	f000 80b9 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 800408c:	4a6a      	ldr	r2, [pc, #424]	; (8004238 <HAL_TIM_ConfigClockSource+0x218>)
 800408e:	4293      	cmp	r3, r2
 8004090:	f200 80be 	bhi.w	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 8004094:	4a69      	ldr	r2, [pc, #420]	; (800423c <HAL_TIM_ConfigClockSource+0x21c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	f000 80b1 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 800409c:	4a67      	ldr	r2, [pc, #412]	; (800423c <HAL_TIM_ConfigClockSource+0x21c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	f200 80b6 	bhi.w	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 80040a4:	4a66      	ldr	r2, [pc, #408]	; (8004240 <HAL_TIM_ConfigClockSource+0x220>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	f000 80a9 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 80040ac:	4a64      	ldr	r2, [pc, #400]	; (8004240 <HAL_TIM_ConfigClockSource+0x220>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	f200 80ae 	bhi.w	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 80040b4:	4a63      	ldr	r2, [pc, #396]	; (8004244 <HAL_TIM_ConfigClockSource+0x224>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	f000 80a1 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 80040bc:	4a61      	ldr	r2, [pc, #388]	; (8004244 <HAL_TIM_ConfigClockSource+0x224>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	f200 80a6 	bhi.w	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 80040c4:	4a60      	ldr	r2, [pc, #384]	; (8004248 <HAL_TIM_ConfigClockSource+0x228>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	f000 8099 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 80040cc:	4a5e      	ldr	r2, [pc, #376]	; (8004248 <HAL_TIM_ConfigClockSource+0x228>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	f200 809e 	bhi.w	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 80040d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80040d8:	f000 8091 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 80040dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80040e0:	f200 8096 	bhi.w	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 80040e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e8:	f000 8089 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 80040ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f0:	f200 808e 	bhi.w	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 80040f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f8:	d03e      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x158>
 80040fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fe:	f200 8087 	bhi.w	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	f000 8086 	beq.w	8004216 <HAL_TIM_ConfigClockSource+0x1f6>
 800410a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410e:	d87f      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 8004110:	2b70      	cmp	r3, #112	; 0x70
 8004112:	d01a      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x12a>
 8004114:	2b70      	cmp	r3, #112	; 0x70
 8004116:	d87b      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 8004118:	2b60      	cmp	r3, #96	; 0x60
 800411a:	d050      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x19e>
 800411c:	2b60      	cmp	r3, #96	; 0x60
 800411e:	d877      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 8004120:	2b50      	cmp	r3, #80	; 0x50
 8004122:	d03c      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x17e>
 8004124:	2b50      	cmp	r3, #80	; 0x50
 8004126:	d873      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d058      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x1be>
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d86f      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 8004130:	2b30      	cmp	r3, #48	; 0x30
 8004132:	d064      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 8004134:	2b30      	cmp	r3, #48	; 0x30
 8004136:	d86b      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 8004138:	2b20      	cmp	r3, #32
 800413a:	d060      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 800413c:	2b20      	cmp	r3, #32
 800413e:	d867      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d05c      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 8004144:	2b10      	cmp	r3, #16
 8004146:	d05a      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x1de>
 8004148:	e062      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800415a:	f000 fcd1 	bl	8004b00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800416c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	609a      	str	r2, [r3, #8]
      break;
 8004176:	e04f      	b.n	8004218 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004188:	f000 fcba 	bl	8004b00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800419a:	609a      	str	r2, [r3, #8]
      break;
 800419c:	e03c      	b.n	8004218 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041aa:	461a      	mov	r2, r3
 80041ac:	f000 fc2c 	bl	8004a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2150      	movs	r1, #80	; 0x50
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fc85 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 80041bc:	e02c      	b.n	8004218 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ca:	461a      	mov	r2, r3
 80041cc:	f000 fc4b 	bl	8004a66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2160      	movs	r1, #96	; 0x60
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fc75 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 80041dc:	e01c      	b.n	8004218 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ea:	461a      	mov	r2, r3
 80041ec:	f000 fc0c 	bl	8004a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2140      	movs	r1, #64	; 0x40
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fc65 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 80041fc:	e00c      	b.n	8004218 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f000 fc5c 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 800420e:	e003      	b.n	8004218 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e000      	b.n	8004218 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	00100070 	.word	0x00100070
 8004238:	00100060 	.word	0x00100060
 800423c:	00100050 	.word	0x00100050
 8004240:	00100040 	.word	0x00100040
 8004244:	00100030 	.word	0x00100030
 8004248:	00100020 	.word	0x00100020

0800424c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a4c      	ldr	r2, [pc, #304]	; (8004390 <TIM_Base_SetConfig+0x144>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d017      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d013      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a49      	ldr	r2, [pc, #292]	; (8004394 <TIM_Base_SetConfig+0x148>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00f      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a48      	ldr	r2, [pc, #288]	; (8004398 <TIM_Base_SetConfig+0x14c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00b      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a47      	ldr	r2, [pc, #284]	; (800439c <TIM_Base_SetConfig+0x150>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d007      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a46      	ldr	r2, [pc, #280]	; (80043a0 <TIM_Base_SetConfig+0x154>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a45      	ldr	r2, [pc, #276]	; (80043a4 <TIM_Base_SetConfig+0x158>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d108      	bne.n	80042a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a39      	ldr	r2, [pc, #228]	; (8004390 <TIM_Base_SetConfig+0x144>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d023      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b4:	d01f      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a36      	ldr	r2, [pc, #216]	; (8004394 <TIM_Base_SetConfig+0x148>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01b      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a35      	ldr	r2, [pc, #212]	; (8004398 <TIM_Base_SetConfig+0x14c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d017      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a34      	ldr	r2, [pc, #208]	; (800439c <TIM_Base_SetConfig+0x150>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a33      	ldr	r2, [pc, #204]	; (80043a0 <TIM_Base_SetConfig+0x154>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00f      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <TIM_Base_SetConfig+0x15c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00b      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a32      	ldr	r2, [pc, #200]	; (80043ac <TIM_Base_SetConfig+0x160>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a31      	ldr	r2, [pc, #196]	; (80043b0 <TIM_Base_SetConfig+0x164>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2c      	ldr	r2, [pc, #176]	; (80043a4 <TIM_Base_SetConfig+0x158>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d108      	bne.n	8004308 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <TIM_Base_SetConfig+0x144>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <TIM_Base_SetConfig+0x110>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a1a      	ldr	r2, [pc, #104]	; (80043a0 <TIM_Base_SetConfig+0x154>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00f      	beq.n	800435c <TIM_Base_SetConfig+0x110>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <TIM_Base_SetConfig+0x15c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00b      	beq.n	800435c <TIM_Base_SetConfig+0x110>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a19      	ldr	r2, [pc, #100]	; (80043ac <TIM_Base_SetConfig+0x160>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d007      	beq.n	800435c <TIM_Base_SetConfig+0x110>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <TIM_Base_SetConfig+0x164>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_Base_SetConfig+0x110>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a13      	ldr	r2, [pc, #76]	; (80043a4 <TIM_Base_SetConfig+0x158>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d103      	bne.n	8004364 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b01      	cmp	r3, #1
 8004374:	d105      	bne.n	8004382 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f023 0201 	bic.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	611a      	str	r2, [r3, #16]
  }
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40013400 	.word	0x40013400
 80043a4:	40015000 	.word	0x40015000
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800

080043b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f023 0201 	bic.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f023 0302 	bic.w	r3, r3, #2
 8004400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a30      	ldr	r2, [pc, #192]	; (80044d0 <TIM_OC1_SetConfig+0x11c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d013      	beq.n	800443c <TIM_OC1_SetConfig+0x88>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a2f      	ldr	r2, [pc, #188]	; (80044d4 <TIM_OC1_SetConfig+0x120>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00f      	beq.n	800443c <TIM_OC1_SetConfig+0x88>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a2e      	ldr	r2, [pc, #184]	; (80044d8 <TIM_OC1_SetConfig+0x124>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00b      	beq.n	800443c <TIM_OC1_SetConfig+0x88>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a2d      	ldr	r2, [pc, #180]	; (80044dc <TIM_OC1_SetConfig+0x128>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d007      	beq.n	800443c <TIM_OC1_SetConfig+0x88>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a2c      	ldr	r2, [pc, #176]	; (80044e0 <TIM_OC1_SetConfig+0x12c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_OC1_SetConfig+0x88>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a2b      	ldr	r2, [pc, #172]	; (80044e4 <TIM_OC1_SetConfig+0x130>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d10c      	bne.n	8004456 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0308 	bic.w	r3, r3, #8
 8004442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f023 0304 	bic.w	r3, r3, #4
 8004454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <TIM_OC1_SetConfig+0x11c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <TIM_OC1_SetConfig+0xd2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <TIM_OC1_SetConfig+0x120>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00f      	beq.n	8004486 <TIM_OC1_SetConfig+0xd2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <TIM_OC1_SetConfig+0x124>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_OC1_SetConfig+0xd2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1a      	ldr	r2, [pc, #104]	; (80044dc <TIM_OC1_SetConfig+0x128>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <TIM_OC1_SetConfig+0xd2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <TIM_OC1_SetConfig+0x12c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_OC1_SetConfig+0xd2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <TIM_OC1_SetConfig+0x130>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d111      	bne.n	80044aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800448c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	621a      	str	r2, [r3, #32]
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40013400 	.word	0x40013400
 80044d8:	40014000 	.word	0x40014000
 80044dc:	40014400 	.word	0x40014400
 80044e0:	40014800 	.word	0x40014800
 80044e4:	40015000 	.word	0x40015000

080044e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f023 0210 	bic.w	r2, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0320 	bic.w	r3, r3, #32
 8004536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a2c      	ldr	r2, [pc, #176]	; (80045f8 <TIM_OC2_SetConfig+0x110>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_OC2_SetConfig+0x74>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2b      	ldr	r2, [pc, #172]	; (80045fc <TIM_OC2_SetConfig+0x114>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_OC2_SetConfig+0x74>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <TIM_OC2_SetConfig+0x118>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d10d      	bne.n	8004578 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004576:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <TIM_OC2_SetConfig+0x110>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <TIM_OC2_SetConfig+0xc0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <TIM_OC2_SetConfig+0x114>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00f      	beq.n	80045a8 <TIM_OC2_SetConfig+0xc0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <TIM_OC2_SetConfig+0x11c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00b      	beq.n	80045a8 <TIM_OC2_SetConfig+0xc0>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <TIM_OC2_SetConfig+0x120>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d007      	beq.n	80045a8 <TIM_OC2_SetConfig+0xc0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1c      	ldr	r2, [pc, #112]	; (800460c <TIM_OC2_SetConfig+0x124>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_OC2_SetConfig+0xc0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a17      	ldr	r2, [pc, #92]	; (8004600 <TIM_OC2_SetConfig+0x118>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d113      	bne.n	80045d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40013400 	.word	0x40013400
 8004600:	40015000 	.word	0x40015000
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800

08004610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0303 	bic.w	r3, r3, #3
 800464a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800465c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2b      	ldr	r2, [pc, #172]	; (800471c <TIM_OC3_SetConfig+0x10c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <TIM_OC3_SetConfig+0x72>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <TIM_OC3_SetConfig+0x110>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_OC3_SetConfig+0x72>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a29      	ldr	r2, [pc, #164]	; (8004724 <TIM_OC3_SetConfig+0x114>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1e      	ldr	r2, [pc, #120]	; (800471c <TIM_OC3_SetConfig+0x10c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <TIM_OC3_SetConfig+0xbe>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <TIM_OC3_SetConfig+0x110>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00f      	beq.n	80046ce <TIM_OC3_SetConfig+0xbe>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <TIM_OC3_SetConfig+0x118>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <TIM_OC3_SetConfig+0xbe>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1c      	ldr	r2, [pc, #112]	; (800472c <TIM_OC3_SetConfig+0x11c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_OC3_SetConfig+0xbe>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <TIM_OC3_SetConfig+0x120>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_OC3_SetConfig+0xbe>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a16      	ldr	r2, [pc, #88]	; (8004724 <TIM_OC3_SetConfig+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d113      	bne.n	80046f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	621a      	str	r2, [r3, #32]
}
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40013400 	.word	0x40013400
 8004724:	40015000 	.word	0x40015000
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800

08004734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	031b      	lsls	r3, r3, #12
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a2c      	ldr	r2, [pc, #176]	; (8004844 <TIM_OC4_SetConfig+0x110>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d007      	beq.n	80047a8 <TIM_OC4_SetConfig+0x74>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a2b      	ldr	r2, [pc, #172]	; (8004848 <TIM_OC4_SetConfig+0x114>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_OC4_SetConfig+0x74>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a2a      	ldr	r2, [pc, #168]	; (800484c <TIM_OC4_SetConfig+0x118>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10d      	bne.n	80047c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <TIM_OC4_SetConfig+0x110>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <TIM_OC4_SetConfig+0xc0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <TIM_OC4_SetConfig+0x114>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00f      	beq.n	80047f4 <TIM_OC4_SetConfig+0xc0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <TIM_OC4_SetConfig+0x11c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00b      	beq.n	80047f4 <TIM_OC4_SetConfig+0xc0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <TIM_OC4_SetConfig+0x120>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d007      	beq.n	80047f4 <TIM_OC4_SetConfig+0xc0>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <TIM_OC4_SetConfig+0x124>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d003      	beq.n	80047f4 <TIM_OC4_SetConfig+0xc0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a17      	ldr	r2, [pc, #92]	; (800484c <TIM_OC4_SetConfig+0x118>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d113      	bne.n	800481c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004802:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	019b      	lsls	r3, r3, #6
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40013400 	.word	0x40013400
 800484c:	40015000 	.word	0x40015000
 8004850:	40014000 	.word	0x40014000
 8004854:	40014400 	.word	0x40014400
 8004858:	40014800 	.word	0x40014800

0800485c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <TIM_OC5_SetConfig+0xbc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <TIM_OC5_SetConfig+0x82>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a18      	ldr	r2, [pc, #96]	; (800491c <TIM_OC5_SetConfig+0xc0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00f      	beq.n	80048de <TIM_OC5_SetConfig+0x82>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a17      	ldr	r2, [pc, #92]	; (8004920 <TIM_OC5_SetConfig+0xc4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00b      	beq.n	80048de <TIM_OC5_SetConfig+0x82>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a16      	ldr	r2, [pc, #88]	; (8004924 <TIM_OC5_SetConfig+0xc8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_OC5_SetConfig+0x82>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a15      	ldr	r2, [pc, #84]	; (8004928 <TIM_OC5_SetConfig+0xcc>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_OC5_SetConfig+0x82>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a14      	ldr	r2, [pc, #80]	; (800492c <TIM_OC5_SetConfig+0xd0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d109      	bne.n	80048f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	621a      	str	r2, [r3, #32]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40013400 	.word	0x40013400
 8004920:	40014000 	.word	0x40014000
 8004924:	40014400 	.word	0x40014400
 8004928:	40014800 	.word	0x40014800
 800492c:	40015000 	.word	0x40015000

08004930 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800495e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	051b      	lsls	r3, r3, #20
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a1a      	ldr	r2, [pc, #104]	; (80049f0 <TIM_OC6_SetConfig+0xc0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <TIM_OC6_SetConfig+0x84>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a19      	ldr	r2, [pc, #100]	; (80049f4 <TIM_OC6_SetConfig+0xc4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00f      	beq.n	80049b4 <TIM_OC6_SetConfig+0x84>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <TIM_OC6_SetConfig+0xc8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00b      	beq.n	80049b4 <TIM_OC6_SetConfig+0x84>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a17      	ldr	r2, [pc, #92]	; (80049fc <TIM_OC6_SetConfig+0xcc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_OC6_SetConfig+0x84>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <TIM_OC6_SetConfig+0xd0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_OC6_SetConfig+0x84>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <TIM_OC6_SetConfig+0xd4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d109      	bne.n	80049c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800
 8004a04:	40015000 	.word	0x40015000

08004a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 030a 	bic.w	r3, r3, #10
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b087      	sub	sp, #28
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f023 0210 	bic.w	r2, r3, #16
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	031b      	lsls	r3, r3, #12
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f043 0307 	orr.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	021a      	lsls	r2, r3, #8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	609a      	str	r2, [r3, #8]
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e074      	b.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a34      	ldr	r2, [pc, #208]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a33      	ldr	r2, [pc, #204]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d108      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d022      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd8:	d01d      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d018      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1d      	ldr	r2, [pc, #116]	; (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a18      	ldr	r2, [pc, #96]	; (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a11      	ldr	r2, [pc, #68]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10c      	bne.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40013400 	.word	0x40013400
 8004c58:	40015000 	.word	0x40015000
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800
 8004c64:	40000c00 	.word	0x40000c00
 8004c68:	40014000 	.word	0x40014000

08004c6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e078      	b.n	8004d7a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	041b      	lsls	r3, r3, #16
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a19      	ldr	r2, [pc, #100]	; (8004d90 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d11c      	bne.n	8004d68 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	051b      	lsls	r3, r3, #20
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	40013400 	.word	0x40013400
 8004d90:	40015000 	.word	0x40015000

08004d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d98:	b08c      	sub	sp, #48	; 0x30
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4baa      	ldr	r3, [pc, #680]	; (800506c <UART_SetConfig+0x2d8>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a9f      	ldr	r2, [pc, #636]	; (8005070 <UART_SetConfig+0x2dc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e0a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	f023 010f 	bic.w	r1, r3, #15
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a90      	ldr	r2, [pc, #576]	; (8005074 <UART_SetConfig+0x2e0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d125      	bne.n	8004e84 <UART_SetConfig+0xf0>
 8004e38:	4b8f      	ldr	r3, [pc, #572]	; (8005078 <UART_SetConfig+0x2e4>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d81a      	bhi.n	8004e7c <UART_SetConfig+0xe8>
 8004e46:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0xb8>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e5d 	.word	0x08004e5d
 8004e50:	08004e6d 	.word	0x08004e6d
 8004e54:	08004e65 	.word	0x08004e65
 8004e58:	08004e75 	.word	0x08004e75
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e62:	e116      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004e64:	2302      	movs	r3, #2
 8004e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e6a:	e112      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e72:	e10e      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004e74:	2308      	movs	r3, #8
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e7a:	e10a      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e82:	e106      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a7c      	ldr	r2, [pc, #496]	; (800507c <UART_SetConfig+0x2e8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d138      	bne.n	8004f00 <UART_SetConfig+0x16c>
 8004e8e:	4b7a      	ldr	r3, [pc, #488]	; (8005078 <UART_SetConfig+0x2e4>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	d82d      	bhi.n	8004ef8 <UART_SetConfig+0x164>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <UART_SetConfig+0x110>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004ed9 	.word	0x08004ed9
 8004ea8:	08004ef9 	.word	0x08004ef9
 8004eac:	08004ef9 	.word	0x08004ef9
 8004eb0:	08004ef9 	.word	0x08004ef9
 8004eb4:	08004ee9 	.word	0x08004ee9
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004ef9 	.word	0x08004ef9
 8004ec0:	08004ef9 	.word	0x08004ef9
 8004ec4:	08004ee1 	.word	0x08004ee1
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004ef1 	.word	0x08004ef1
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ede:	e0d8      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee6:	e0d4      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eee:	e0d0      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef6:	e0cc      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efe:	e0c8      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a5e      	ldr	r2, [pc, #376]	; (8005080 <UART_SetConfig+0x2ec>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d125      	bne.n	8004f56 <UART_SetConfig+0x1c2>
 8004f0a:	4b5b      	ldr	r3, [pc, #364]	; (8005078 <UART_SetConfig+0x2e4>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f14:	2b30      	cmp	r3, #48	; 0x30
 8004f16:	d016      	beq.n	8004f46 <UART_SetConfig+0x1b2>
 8004f18:	2b30      	cmp	r3, #48	; 0x30
 8004f1a:	d818      	bhi.n	8004f4e <UART_SetConfig+0x1ba>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d00a      	beq.n	8004f36 <UART_SetConfig+0x1a2>
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d814      	bhi.n	8004f4e <UART_SetConfig+0x1ba>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <UART_SetConfig+0x19a>
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d008      	beq.n	8004f3e <UART_SetConfig+0x1aa>
 8004f2c:	e00f      	b.n	8004f4e <UART_SetConfig+0x1ba>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f34:	e0ad      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004f36:	2302      	movs	r3, #2
 8004f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f3c:	e0a9      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004f3e:	2304      	movs	r3, #4
 8004f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f44:	e0a5      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004f46:	2308      	movs	r3, #8
 8004f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4c:	e0a1      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004f4e:	2310      	movs	r3, #16
 8004f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f54:	e09d      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a4a      	ldr	r2, [pc, #296]	; (8005084 <UART_SetConfig+0x2f0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d125      	bne.n	8004fac <UART_SetConfig+0x218>
 8004f60:	4b45      	ldr	r3, [pc, #276]	; (8005078 <UART_SetConfig+0x2e4>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f6c:	d016      	beq.n	8004f9c <UART_SetConfig+0x208>
 8004f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f70:	d818      	bhi.n	8004fa4 <UART_SetConfig+0x210>
 8004f72:	2b80      	cmp	r3, #128	; 0x80
 8004f74:	d00a      	beq.n	8004f8c <UART_SetConfig+0x1f8>
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d814      	bhi.n	8004fa4 <UART_SetConfig+0x210>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <UART_SetConfig+0x1f0>
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d008      	beq.n	8004f94 <UART_SetConfig+0x200>
 8004f82:	e00f      	b.n	8004fa4 <UART_SetConfig+0x210>
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8a:	e082      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f92:	e07e      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004f94:	2304      	movs	r3, #4
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9a:	e07a      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa2:	e076      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004faa:	e072      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a35      	ldr	r2, [pc, #212]	; (8005088 <UART_SetConfig+0x2f4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d12a      	bne.n	800500c <UART_SetConfig+0x278>
 8004fb6:	4b30      	ldr	r3, [pc, #192]	; (8005078 <UART_SetConfig+0x2e4>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc4:	d01a      	beq.n	8004ffc <UART_SetConfig+0x268>
 8004fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fca:	d81b      	bhi.n	8005004 <UART_SetConfig+0x270>
 8004fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd0:	d00c      	beq.n	8004fec <UART_SetConfig+0x258>
 8004fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd6:	d815      	bhi.n	8005004 <UART_SetConfig+0x270>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <UART_SetConfig+0x250>
 8004fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe0:	d008      	beq.n	8004ff4 <UART_SetConfig+0x260>
 8004fe2:	e00f      	b.n	8005004 <UART_SetConfig+0x270>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fea:	e052      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004fec:	2302      	movs	r3, #2
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ff2:	e04e      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ffa:	e04a      	b.n	8005092 <UART_SetConfig+0x2fe>
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005002:	e046      	b.n	8005092 <UART_SetConfig+0x2fe>
 8005004:	2310      	movs	r3, #16
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500a:	e042      	b.n	8005092 <UART_SetConfig+0x2fe>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a17      	ldr	r2, [pc, #92]	; (8005070 <UART_SetConfig+0x2dc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d13a      	bne.n	800508c <UART_SetConfig+0x2f8>
 8005016:	4b18      	ldr	r3, [pc, #96]	; (8005078 <UART_SetConfig+0x2e4>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005024:	d01a      	beq.n	800505c <UART_SetConfig+0x2c8>
 8005026:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800502a:	d81b      	bhi.n	8005064 <UART_SetConfig+0x2d0>
 800502c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005030:	d00c      	beq.n	800504c <UART_SetConfig+0x2b8>
 8005032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005036:	d815      	bhi.n	8005064 <UART_SetConfig+0x2d0>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <UART_SetConfig+0x2b0>
 800503c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005040:	d008      	beq.n	8005054 <UART_SetConfig+0x2c0>
 8005042:	e00f      	b.n	8005064 <UART_SetConfig+0x2d0>
 8005044:	2300      	movs	r3, #0
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800504a:	e022      	b.n	8005092 <UART_SetConfig+0x2fe>
 800504c:	2302      	movs	r3, #2
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005052:	e01e      	b.n	8005092 <UART_SetConfig+0x2fe>
 8005054:	2304      	movs	r3, #4
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800505a:	e01a      	b.n	8005092 <UART_SetConfig+0x2fe>
 800505c:	2308      	movs	r3, #8
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005062:	e016      	b.n	8005092 <UART_SetConfig+0x2fe>
 8005064:	2310      	movs	r3, #16
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506a:	e012      	b.n	8005092 <UART_SetConfig+0x2fe>
 800506c:	cfff69f3 	.word	0xcfff69f3
 8005070:	40008000 	.word	0x40008000
 8005074:	40013800 	.word	0x40013800
 8005078:	40021000 	.word	0x40021000
 800507c:	40004400 	.word	0x40004400
 8005080:	40004800 	.word	0x40004800
 8005084:	40004c00 	.word	0x40004c00
 8005088:	40005000 	.word	0x40005000
 800508c:	2310      	movs	r3, #16
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4aae      	ldr	r2, [pc, #696]	; (8005350 <UART_SetConfig+0x5bc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	f040 8097 	bne.w	80051cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800509e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d823      	bhi.n	80050ee <UART_SetConfig+0x35a>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <UART_SetConfig+0x318>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050ef 	.word	0x080050ef
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050ef 	.word	0x080050ef
 80050bc:	080050df 	.word	0x080050df
 80050c0:	080050ef 	.word	0x080050ef
 80050c4:	080050ef 	.word	0x080050ef
 80050c8:	080050ef 	.word	0x080050ef
 80050cc:	080050e7 	.word	0x080050e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7fe fb1a 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 80050d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050d6:	e010      	b.n	80050fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d8:	4b9e      	ldr	r3, [pc, #632]	; (8005354 <UART_SetConfig+0x5c0>)
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050dc:	e00d      	b.n	80050fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050de:	f7fe faa5 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80050e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050e4:	e009      	b.n	80050fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050ec:	e005      	b.n	80050fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8130 	beq.w	8005362 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	4a94      	ldr	r2, [pc, #592]	; (8005358 <UART_SetConfig+0x5c4>)
 8005108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800510c:	461a      	mov	r2, r3
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	fbb3 f3f2 	udiv	r3, r3, r2
 8005114:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	4413      	add	r3, r2
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	429a      	cmp	r2, r3
 8005124:	d305      	bcc.n	8005132 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	429a      	cmp	r2, r3
 8005130:	d903      	bls.n	800513a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005138:	e113      	b.n	8005362 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2200      	movs	r2, #0
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	60fa      	str	r2, [r7, #12]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	4a84      	ldr	r2, [pc, #528]	; (8005358 <UART_SetConfig+0x5c4>)
 8005148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800514c:	b29b      	uxth	r3, r3
 800514e:	2200      	movs	r2, #0
 8005150:	603b      	str	r3, [r7, #0]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800515c:	f7fb f85c 	bl	8000218 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4610      	mov	r0, r2
 8005166:	4619      	mov	r1, r3
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	020b      	lsls	r3, r1, #8
 8005172:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005176:	0202      	lsls	r2, r0, #8
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	6849      	ldr	r1, [r1, #4]
 800517c:	0849      	lsrs	r1, r1, #1
 800517e:	2000      	movs	r0, #0
 8005180:	460c      	mov	r4, r1
 8005182:	4605      	mov	r5, r0
 8005184:	eb12 0804 	adds.w	r8, r2, r4
 8005188:	eb43 0905 	adc.w	r9, r3, r5
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	469a      	mov	sl, r3
 8005194:	4693      	mov	fp, r2
 8005196:	4652      	mov	r2, sl
 8005198:	465b      	mov	r3, fp
 800519a:	4640      	mov	r0, r8
 800519c:	4649      	mov	r1, r9
 800519e:	f7fb f83b 	bl	8000218 <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4613      	mov	r3, r2
 80051a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b0:	d308      	bcc.n	80051c4 <UART_SetConfig+0x430>
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b8:	d204      	bcs.n	80051c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6a3a      	ldr	r2, [r7, #32]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	e0ce      	b.n	8005362 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051ca:	e0ca      	b.n	8005362 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d4:	d166      	bne.n	80052a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80051d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d827      	bhi.n	800522e <UART_SetConfig+0x49a>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0x450>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005219 	.word	0x08005219
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	0800521f 	.word	0x0800521f
 80051f8:	0800522f 	.word	0x0800522f
 80051fc:	0800522f 	.word	0x0800522f
 8005200:	0800522f 	.word	0x0800522f
 8005204:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7fe fa7e 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 800520c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800520e:	e014      	b.n	800523a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005210:	f7fe fa90 	bl	8003734 <HAL_RCC_GetPCLK2Freq>
 8005214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005216:	e010      	b.n	800523a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b4e      	ldr	r3, [pc, #312]	; (8005354 <UART_SetConfig+0x5c0>)
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800521c:	e00d      	b.n	800523a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7fe fa05 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8005222:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005224:	e009      	b.n	800523a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800522c:	e005      	b.n	800523a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8090 	beq.w	8005362 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	4a44      	ldr	r2, [pc, #272]	; (8005358 <UART_SetConfig+0x5c4>)
 8005248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800524c:	461a      	mov	r2, r3
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	fbb3 f3f2 	udiv	r3, r3, r2
 8005254:	005a      	lsls	r2, r3, #1
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	441a      	add	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	fbb2 f3f3 	udiv	r3, r2, r3
 8005266:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	2b0f      	cmp	r3, #15
 800526c:	d916      	bls.n	800529c <UART_SetConfig+0x508>
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005274:	d212      	bcs.n	800529c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	b29b      	uxth	r3, r3
 800527a:	f023 030f 	bic.w	r3, r3, #15
 800527e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	b29b      	uxth	r3, r3
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	b29a      	uxth	r2, r3
 800528c:	8bfb      	ldrh	r3, [r7, #30]
 800528e:	4313      	orrs	r3, r2
 8005290:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	8bfa      	ldrh	r2, [r7, #30]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	e062      	b.n	8005362 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052a2:	e05e      	b.n	8005362 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d828      	bhi.n	80052fe <UART_SetConfig+0x56a>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0x520>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	080052ff 	.word	0x080052ff
 80052c4:	080052ef 	.word	0x080052ef
 80052c8:	080052ff 	.word	0x080052ff
 80052cc:	080052ff 	.word	0x080052ff
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	080052f7 	.word	0x080052f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d8:	f7fe fa16 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 80052dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052de:	e014      	b.n	800530a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e0:	f7fe fa28 	bl	8003734 <HAL_RCC_GetPCLK2Freq>
 80052e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052e6:	e010      	b.n	800530a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e8:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <UART_SetConfig+0x5c0>)
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052ec:	e00d      	b.n	800530a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ee:	f7fe f99d 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80052f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052f4:	e009      	b.n	800530a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052fc:	e005      	b.n	800530a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005308:	bf00      	nop
    }

    if (pclk != 0U)
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	d028      	beq.n	8005362 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	4a10      	ldr	r2, [pc, #64]	; (8005358 <UART_SetConfig+0x5c4>)
 8005316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800531a:	461a      	mov	r2, r3
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	441a      	add	r2, r3
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005332:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	2b0f      	cmp	r3, #15
 8005338:	d910      	bls.n	800535c <UART_SetConfig+0x5c8>
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005340:	d20c      	bcs.n	800535c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	b29a      	uxth	r2, r3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e009      	b.n	8005362 <UART_SetConfig+0x5ce>
 800534e:	bf00      	nop
 8005350:	40008000 	.word	0x40008000
 8005354:	00f42400 	.word	0x00f42400
 8005358:	08005ba0 	.word	0x08005ba0
      }
      else
      {
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2201      	movs	r2, #1
 8005366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2201      	movs	r2, #1
 800536e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2200      	movs	r2, #0
 8005376:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2200      	movs	r2, #0
 800537c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800537e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005382:	4618      	mov	r0, r3
 8005384:	3730      	adds	r7, #48	; 0x30
 8005386:	46bd      	mov	sp, r7
 8005388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800538c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01a      	beq.n	80054a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800548a:	d10a      	bne.n	80054a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	605a      	str	r2, [r3, #4]
  }
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b098      	sub	sp, #96	; 0x60
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054e0:	f7fb fe66 	bl	80011b0 <HAL_GetTick>
 80054e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d12f      	bne.n	8005554 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fc:	2200      	movs	r2, #0
 80054fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f88e 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d022      	beq.n	8005554 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800551c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005522:	653b      	str	r3, [r7, #80]	; 0x50
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552c:	647b      	str	r3, [r7, #68]	; 0x44
 800552e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e6      	bne.n	800550e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e063      	b.n	800561c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b04      	cmp	r3, #4
 8005560:	d149      	bne.n	80055f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005562:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800556a:	2200      	movs	r2, #0
 800556c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f857 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d03c      	beq.n	80055f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	623b      	str	r3, [r7, #32]
   return(result);
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559a:	633b      	str	r3, [r7, #48]	; 0x30
 800559c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e6      	bne.n	800557c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f023 0301 	bic.w	r3, r3, #1
 80055c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3308      	adds	r3, #8
 80055cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ce:	61fa      	str	r2, [r7, #28]
 80055d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	69b9      	ldr	r1, [r7, #24]
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	617b      	str	r3, [r7, #20]
   return(result);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e5      	bne.n	80055ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e012      	b.n	800561c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3758      	adds	r7, #88	; 0x58
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005634:	e04f      	b.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d04b      	beq.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563e:	f7fb fdb7 	bl	80011b0 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <UART_WaitOnFlagUntilTimeout+0x30>
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e04e      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d037      	beq.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b80      	cmp	r3, #128	; 0x80
 800566a:	d034      	beq.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d031      	beq.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b08      	cmp	r3, #8
 800567e:	d110      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2208      	movs	r2, #8
 8005686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f838 	bl	80056fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2208      	movs	r2, #8
 8005692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e029      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b0:	d111      	bne.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f81e 	bl	80056fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e00f      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4013      	ands	r3, r2
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	bf0c      	ite	eq
 80056e6:	2301      	moveq	r3, #1
 80056e8:	2300      	movne	r3, #0
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	79fb      	ldrb	r3, [r7, #7]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d0a0      	beq.n	8005636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056fe:	b480      	push	{r7}
 8005700:	b095      	sub	sp, #84	; 0x54
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800571a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005724:	643b      	str	r3, [r7, #64]	; 0x40
 8005726:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800572a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e6      	bne.n	8005706 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	61fb      	str	r3, [r7, #28]
   return(result);
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	64bb      	str	r3, [r7, #72]	; 0x48
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3308      	adds	r3, #8
 800575a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800575c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e3      	bne.n	8005738 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d118      	bne.n	80057aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	60bb      	str	r3, [r7, #8]
   return(result);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 0310 	bic.w	r3, r3, #16
 800578c:	647b      	str	r3, [r7, #68]	; 0x44
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	6979      	ldr	r1, [r7, #20]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	613b      	str	r3, [r7, #16]
   return(result);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e6      	bne.n	8005778 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80057be:	bf00      	nop
 80057c0:	3754      	adds	r7, #84	; 0x54
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b086      	sub	sp, #24
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e058      	b.n	8005894 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7fb fb85 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2224      	movs	r2, #36	; 0x24
 80057fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0201 	bic.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7ff fdb6 	bl	800538c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fab7 	bl	8004d94 <UART_SetConfig>
 8005826:	4603      	mov	r3, r0
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e031      	b.n	8005894 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800583e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	430a      	orrs	r2, r1
 8005852:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	055b      	lsls	r3, r3, #21
 8005858:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800586e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	6979      	ldr	r1, [r7, #20]
 8005878:	430b      	orrs	r3, r1
 800587a:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f7ff fe1f 	bl	80054d0 <UART_CheckIdleState>
 8005892:	4603      	mov	r3, r0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e027      	b.n	8005902 <HAL_UARTEx_DisableFifoMode+0x66>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2224      	movs	r2, #36	; 0x24
 80058be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005922:	2302      	movs	r3, #2
 8005924:	e02d      	b.n	8005982 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2224      	movs	r2, #36	; 0x24
 8005932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f850 	bl	8005a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800599e:	2302      	movs	r3, #2
 80059a0:	e02d      	b.n	80059fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2224      	movs	r2, #36	; 0x24
 80059ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f812 	bl	8005a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d108      	bne.n	8005a2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a28:	e031      	b.n	8005a8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a2a:	2308      	movs	r3, #8
 8005a2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a2e:	2308      	movs	r3, #8
 8005a30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	0e5b      	lsrs	r3, r3, #25
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	0f5b      	lsrs	r3, r3, #29
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a52:	7bbb      	ldrb	r3, [r7, #14]
 8005a54:	7b3a      	ldrb	r2, [r7, #12]
 8005a56:	4911      	ldr	r1, [pc, #68]	; (8005a9c <UARTEx_SetNbDataToProcess+0x94>)
 8005a58:	5c8a      	ldrb	r2, [r1, r2]
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a5e:	7b3a      	ldrb	r2, [r7, #12]
 8005a60:	490f      	ldr	r1, [pc, #60]	; (8005aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8005a62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	7b7a      	ldrb	r2, [r7, #13]
 8005a74:	4909      	ldr	r1, [pc, #36]	; (8005a9c <UARTEx_SetNbDataToProcess+0x94>)
 8005a76:	5c8a      	ldrb	r2, [r1, r2]
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a7c:	7b7a      	ldrb	r2, [r7, #13]
 8005a7e:	4908      	ldr	r1, [pc, #32]	; (8005aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8005a80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a82:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	08005bb8 	.word	0x08005bb8
 8005aa0:	08005bc0 	.word	0x08005bc0

08005aa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005aac:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005ab0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <memset>:
 8005b16:	4402      	add	r2, r0
 8005b18:	4603      	mov	r3, r0
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d100      	bne.n	8005b20 <memset+0xa>
 8005b1e:	4770      	bx	lr
 8005b20:	f803 1b01 	strb.w	r1, [r3], #1
 8005b24:	e7f9      	b.n	8005b1a <memset+0x4>
	...

08005b28 <__libc_init_array>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4d0d      	ldr	r5, [pc, #52]	; (8005b60 <__libc_init_array+0x38>)
 8005b2c:	4c0d      	ldr	r4, [pc, #52]	; (8005b64 <__libc_init_array+0x3c>)
 8005b2e:	1b64      	subs	r4, r4, r5
 8005b30:	10a4      	asrs	r4, r4, #2
 8005b32:	2600      	movs	r6, #0
 8005b34:	42a6      	cmp	r6, r4
 8005b36:	d109      	bne.n	8005b4c <__libc_init_array+0x24>
 8005b38:	4d0b      	ldr	r5, [pc, #44]	; (8005b68 <__libc_init_array+0x40>)
 8005b3a:	4c0c      	ldr	r4, [pc, #48]	; (8005b6c <__libc_init_array+0x44>)
 8005b3c:	f000 f818 	bl	8005b70 <_init>
 8005b40:	1b64      	subs	r4, r4, r5
 8005b42:	10a4      	asrs	r4, r4, #2
 8005b44:	2600      	movs	r6, #0
 8005b46:	42a6      	cmp	r6, r4
 8005b48:	d105      	bne.n	8005b56 <__libc_init_array+0x2e>
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b50:	4798      	blx	r3
 8005b52:	3601      	adds	r6, #1
 8005b54:	e7ee      	b.n	8005b34 <__libc_init_array+0xc>
 8005b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5a:	4798      	blx	r3
 8005b5c:	3601      	adds	r6, #1
 8005b5e:	e7f2      	b.n	8005b46 <__libc_init_array+0x1e>
 8005b60:	08005bd0 	.word	0x08005bd0
 8005b64:	08005bd0 	.word	0x08005bd0
 8005b68:	08005bd0 	.word	0x08005bd0
 8005b6c:	08005bd4 	.word	0x08005bd4

08005b70 <_init>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	bf00      	nop
 8005b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b76:	bc08      	pop	{r3}
 8005b78:	469e      	mov	lr, r3
 8005b7a:	4770      	bx	lr

08005b7c <_fini>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	bf00      	nop
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr
